import { AddressResidentialIndicator } from '@shipengine/connect-carrier-api';
import {FakeAddressBuilder} from '../../src';
import { Countries } from '../../src/tests-helper/enums/countries';

describe('Test FakeAddressBuilder mapping', function () {

    test('All fields have default values', () => {
        const result = new FakeAddressBuilder().Build();

        expect(result.country_code).toBe('');
        expect(result.address_lines).toStrictEqual([]);
        expect(result.postal_code).toBe('');
        expect(result.address_residential_indicator).toBe(AddressResidentialIndicator.No);
        expect(result.city_locality).toBe('');
        expect(result.company_name).toBe('');
        expect(result.email).toBe('');
        expect(result.first_name).toBe('');
        expect(result.last_name).toBe('');
        expect(result.instructions).toBe('');
        expect(result.is_eu).toBe(false);
        expect(result.name).toBe('');
        expect(result.phone_number).toBe('');
        expect(result.state_province).toBe('');
    });

    test('Set country code. Expected US', () => {
        expect(new FakeAddressBuilder().SetCountry('US').Build().country_code).toBe('US');
    });

    test('Set address lines. Expected [AddressLine1, AddressLine2]', () => {
        expect(new FakeAddressBuilder().SetAddressLines(['AddressLine1', 'AddressLine2']).Build().address_lines).toStrictEqual(['AddressLine1', 'AddressLine2']);
    });

    test('Set postal code. Expected 11AF', () => {
        expect(new FakeAddressBuilder().SetPostalCode('11AF').Build().postal_code).toBe('11AF');
    });

    test('Set address residential indicator. Expected Yes', () => {
        expect(new FakeAddressBuilder().SetAddressResidentialIndicator(AddressResidentialIndicator.Yes).Build().address_residential_indicator).toBe(AddressResidentialIndicator.Yes);
    });

    test('Set city. Expected London', () => {
        expect(new FakeAddressBuilder().SetCity('London').Build().city_locality).toBe('London');
    });

    test('Set company name. Expected London Company', () => {
        expect(new FakeAddressBuilder().SetCompanyName('London Company').Build().company_name).toBe('London Company');
    });

    test('Set email. Expected \'test@auctane.com\'', () => {
        expect(new FakeAddressBuilder().SetEmail('test@auctane.com').Build().email).toBe('test@auctane.com');
    });

    test('Set first name. Expected Pawel', () => {
        expect(new FakeAddressBuilder().SetFirstName('Pawel').Build().first_name).toBe('Pawel');
    });

    test('Set last name. Expected Kowalski', () => {
        expect(new FakeAddressBuilder().SetLastName('Kowalski').Build().last_name).toBe('Kowalski');
    });

    test('Set instructions. Expected \'special instructions\'', () => {
        expect(new FakeAddressBuilder().SetInstructions('special instructions').Build().instructions).toBe('special instructions');
    });

    test('Set is eu. Expected \'true\'', () => {
        expect(new FakeAddressBuilder().SetIsEu(true).Build().is_eu).toBe(true);
    });

    test('Set name. Expected \'Piotr\'', () => {
        expect(new FakeAddressBuilder().SetName('Piotr').Build().name).toBe('Piotr');
    });

    test('Set phone number. Expected \'123456789\'', () => {
        expect(new FakeAddressBuilder().SetPhoneNumber('123456789').Build().phone_number).toBe('123456789');
    });

    test('Set province. Expected \'NY\'', () => {
        expect(new FakeAddressBuilder().SetStateProvince('NY').Build().state_province).toBe('NY');
    });

    describe('Set default properties for specific country.', function () {
        test('Check CountryCode field. Expected PL.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.country_code).toBe('PL');
        });

        test('Check AddressLine field. Expected AddressLine1, AddressLine2, AddressLine3.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.address_lines).toStrictEqual(['AddressLine1', 'AddressLine2', 'AddressLine3']);
        });

        test('Check PostalCode field. Expected 65-001.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.postal_code).toBe('65-001');
        });

        test('Check AddressResidentialIndicator field. Expected No.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.address_residential_indicator).toBe(AddressResidentialIndicator.No);
        });

        test('Check CityLocality field. Expected Zielona Góra.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.city_locality).toBe('Zielona Góra');
        });

        test('Check CompanyName field. Expected Poland Company', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.company_name).toBe('Poland Company');
        });

        test('Check Email field. Expected polandcompany@test.com.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.email).toBe('polandcompany@test.com');
        });

        test('Check FirstName field. Expected Jan.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.first_name).toBe('Jan');
        });

        test('Check LastName field. Expected Kowalski.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.last_name).toBe('Kowalski');
        });

        test('Check Instructions field. Expected Instructions', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.instructions).toBe('Instructions');
        });

        test('Check IsEU field. Expected true.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.is_eu).toBe(true);
        });

        test('Check Name field. Expected Jan Kowalski', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.name).toBe('Jan Kowalski');
        });

        test('Check PhoneNumber field. Expected 68123456789', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.phone_number).toBe('68123456789');
        });

        test('Check StateProvince field. Expected empty.', () => {
            const result = new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
                .Build();

            expect(result.state_province).toBe('');
        });

        test('Set not existing address. Should throw exception', () => {
            expect( () => new FakeAddressBuilder().SetDefaultAddressForSpecifiedCountry('ABC' as Countries)
                .Build()).toThrowError("The map doesn't contains following element.");
        });
    });
});
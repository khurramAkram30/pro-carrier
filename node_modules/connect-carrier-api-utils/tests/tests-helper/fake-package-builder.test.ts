import { FakeCustomsBuilder, FakePackageBuilder } from '../../src';
import { DimensionUnit, WeightUnit } from '@shipengine/connect-carrier-api';

describe('create fake package tests object tests', function () {
  test('Set Package Code. Expected bag.', () => {
    const fakePackage = new FakePackageBuilder().SetPackageCode('bag')
      .Build();

    expect(fakePackage.package_code).toBe('bag');
  });

  test('Set Weight In Details. Expected weight in grams equal to 1000 grams.', () => {
    const fakePackage = new FakePackageBuilder()
      .SetWeightDetails({
        weight_in_grams: 1000,
        source_weight: 1000,
        source_weight_unit: WeightUnit.Grams,
        weight_in_ounces: 20
      })
      .Build();

    expect(fakePackage.weight_details!.weight_in_grams).toBe(1000);
  });

  test('Set Weight In Details. Expected source weight unit grams.', () => {
    const fakePackage = new FakePackageBuilder()
      .SetWeightDetails({
        weight_in_grams: 1000,
        source_weight: 1000,
        source_weight_unit: WeightUnit.Grams,
        weight_in_ounces: 20
      })
      .Build();

    expect(fakePackage.weight_details!.source_weight_unit).toBe(
      WeightUnit.Grams,
    );
  });

  test('Set Weight In Details. Expected source weight equal to 1000 grams.', () => {
    const fakePackage = new FakePackageBuilder()
      .SetWeightDetails({
        weight_in_grams: 1000,
        source_weight: 1000,
        source_weight_unit: WeightUnit.Grams,
        weight_in_ounces: 20
      })
      .Build();

    expect(fakePackage.weight_details!.source_weight).toBe(1000);
  });

  test('Set Weight In Details. Expected weight in ounces equal to 20oz.', () => {
    const fakePackage = new FakePackageBuilder()
      .SetWeightDetails({
        weight_in_grams: 1000,
        source_weight: 1000,
        source_weight_unit: WeightUnit.Grams,
        weight_in_ounces: 20
      })
      .Build();

    expect(fakePackage.weight_details!.weight_in_ounces).toBe(20);
  });

  test('Set Label Messages. Expected reference1', () => {
    const fakePackage = new FakePackageBuilder()
      .SetLabelMessages({
        reference1: 'reference1',
        reference2: 'reference2',
        reference3: 'reference3'
      })
      .Build();

    expect(fakePackage.label_messages!.reference1).toBe('reference1');
  });

  test('Set Label Messages. Expected reference2', () => {
    const fakePackage = new FakePackageBuilder()
      .SetLabelMessages({
        reference1: 'reference1',
        reference2: 'reference2',
        reference3: 'reference3'
      })
      .Build();

    expect(fakePackage.label_messages!.reference2).toBe('reference2');
  });

  test('Set Label Messages. Expected reference3', () => {
    const fakePackage = new FakePackageBuilder()
      .SetLabelMessages({
        reference1: 'reference1',
        reference2: 'reference2',
        reference3: 'reference3'
      })
      .Build();

    expect(fakePackage.label_messages!.reference3).toBe('reference3');
  });

  test('Set Customs. Expected Customs object', () => {
    const fakePackage = new FakePackageBuilder()
      .SetCustoms(new FakeCustomsBuilder().Build())
      .Build();

    expect(fakePackage.customs).toBeDefined();
  });

  test('Set Insured Value currency. Expected PLN', () => {
    const fakePackage = new FakePackageBuilder()
      .SetInsuredValue({ currency: 'PLN', amount: '100' })
      .Build();

    expect(fakePackage.insured_value!.currency).toBe('PLN');
  });

  test('Set Insured Value amount. Expected 100', () => {
    const fakePackage = new FakePackageBuilder()
      .SetInsuredValue({ currency: 'PLN', amount: '100' })
      .Build();

    expect(fakePackage.insured_value!.amount).toBe('100');
  });

  test('Set Dimension Details. Expected same dimension unit.', () => {
    const fakePackage = new FakePackageBuilder()
      .SetDimensions({ source_dimension_unit: DimensionUnit.Centimeters })
      .Build();

    expect(fakePackage.dimension_details!.source_dimension_unit).toBe(
      DimensionUnit.Centimeters,
    );
  });

  test('Set Dimension Details. Expected same dimensions in centimeters.', () => {
    const fakePackage = new FakePackageBuilder()
      .SetDimensions({
        source_dimension_unit: DimensionUnit.Centimeters,
        dimensions_in_centimeters: {
          length: 10,
          height: 15,
          width: 20
        }
      })
      .Build();

    expect(fakePackage.dimension_details!.dimensions_in_centimeters).toStrictEqual({
      length: 10,
      height: 15,
      width: 20
    });
  });

  test('Set Dimension Details. Expected same dimension in inches', () => {
    const fakePackage = new FakePackageBuilder()
      .SetDimensions({
        source_dimension_unit: DimensionUnit.Centimeters,
        dimensions_in_inches: {
          length: 5,
          height: 8,
          width: 12
        }
      })
      .Build();

    expect(fakePackage.dimension_details!.dimensions_in_inches).toStrictEqual({
      length: 5,
      height: 8,
      width: 12
    });
  });

  test('Set Dimension Details. Expected same source dimensions.', () => {
    const fakePackage = new FakePackageBuilder()
      .SetDimensions({
        source_dimension_unit: DimensionUnit.Centimeters,
        dimensions_in_centimeters: {
          length: 10,
          height: 15,
          width: 20
        },
        dimensions_in_inches: {
          length: 5,
          height: 8,
          width: 12
        },
        source_dimensions: {
          length: 10,
          height: 15,
          width: 20
        }
      })
      .Build();

    expect(fakePackage.dimension_details!.source_dimensions).toStrictEqual({
      length: 10,
      height: 15,
      width: 20
    });
  });
});

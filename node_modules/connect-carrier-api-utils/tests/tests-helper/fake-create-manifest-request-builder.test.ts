import {
  FakeAddressBuilder,
  FakeCreateManifestRequestBuilder,
  FakePackageBuilder
} from '../../src';
import { ManifestRequestShipment } from '@shipengine/connect-carrier-api';

describe('Create fake manifest request tests', function () {
  test('Add labels to request. Request should contains labels', () => {
    const shipment: ManifestRequestShipment[] = [
      {
        ship_to: new FakeAddressBuilder().Build(),
        manifest_request_shipment_id: '12345678',
        packages: [new FakePackageBuilder().Build()],
        tracking_number: '123456789',
        service_code: '00000000'
      }
    ];

    const request = new FakeCreateManifestRequestBuilder()
      .SetLabels(shipment)
      .Build();

    expect(request.included_labels).toStrictEqual([
      {
        ship_to: new FakeAddressBuilder().Build(),
        manifest_request_shipment_id: '12345678',
        packages: [new FakePackageBuilder().Build()],
        tracking_number: '123456789',
        service_code: '00000000'
      }
    ]);
  });

  test('Set metadata. Created request should contains same object.', () => {
    const request = new FakeCreateManifestRequestBuilder()
      .SetMetadata({
        test: 'testMetadata'
      })
      .Build();

    expect(request.metadata).toStrictEqual({
      test: 'testMetadata'
    });
  });
});

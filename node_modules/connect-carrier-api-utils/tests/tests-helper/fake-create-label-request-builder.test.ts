import {FakeCreateLabelRequestBuilder, FakePackageBuilder, FakeShipFromBuilder} from '../../src';
import {Countries} from '../../src/tests-helper/enums/countries';

describe('Test create fake create label request', function () {
    test('Set default sender. Expected correct sender in request', () => {
        const sender = new FakeShipFromBuilder().SetDefaultAddressForSpecifiedCountry(Countries.DEFAULT)
.Build();

        const result = new FakeCreateLabelRequestBuilder().SetSender(sender)
.Build();

        expect(result.ship_from).toBe(sender);
    });

    test('Set default receiver. Expected correct receiver in request', () => {
        const receiver = new FakeShipFromBuilder().SetDefaultAddressForSpecifiedCountry(Countries.DEFAULT)
.Build();

        const result = new FakeCreateLabelRequestBuilder().SetReceiver(receiver)
.Build();

        expect(result.ship_to).toBe(receiver);
    });

    test('Set ship date time. Expected 2022', () => {

        const result = new FakeCreateLabelRequestBuilder().SetShipDateTime('2022-02-05')
.Build();

        expect(result.ship_datetime).toBe('2022-02-05');
    });

    test('Set service. Expected correct service in request', () => {

        const result = new FakeCreateLabelRequestBuilder().SetService('service')
.Build();

        expect(result.service_code).toBe('service');
    });

    test('Set packages. Expected correct packages in request', () => {
        const packages = [new FakePackageBuilder().Build()];

        const result = new FakeCreateLabelRequestBuilder().SetPackages(packages)
.Build();

        expect(result.packages).toBe(packages);
    });

    test('Set transaction. Expected correct transaction in request', () => {

        const result = new FakeCreateLabelRequestBuilder().SetTransactionId('transaction')
.Build();

        expect(result.transaction_id).toBe('transaction');
    });

    test('Set metadata. Expect same metadata object data.', () => {
        const metadata = {test: 'test'};

        const result = new FakeCreateLabelRequestBuilder().SetMetadata(metadata)
            .Build();

        expect(result.metadata).toStrictEqual({test: 'test'});
    });

});
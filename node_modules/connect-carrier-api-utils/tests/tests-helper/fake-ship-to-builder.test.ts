import {FakeShipToBuilder} from '../../src';
import {AddressResidentialIndicator, TaxIdentifierType} from '@shipengine/connect-carrier-api';
import {Countries} from '../../src/tests-helper/enums/countries';

describe('create fake ship to object tests', function () {
  test('Set Tax Id, provided Tin Id type and 123456789 value. Expected Tin 123456789', () => {
    const result = new FakeShipToBuilder()
      .SetTaxId([{ id: '123456789', type: TaxIdentifierType.TIN }])
      .Build();

    expect(result.tax_identifiers![0]).toStrictEqual({'id': '123456789', 'type': 'tin'});
  });

  test('Set Country, provide PL country. Expected PL.', () => {
    const result = new FakeShipToBuilder().SetCountry('PL').Build();

    expect(result.country_code).toBe('PL');
  });

  test('Country is default empty', () => {
    const result = new FakeShipToBuilder().Build();

    expect(result.country_code).toBe('');
  });

  test('Postal code is default empty', () => {
    const result = new FakeShipToBuilder().Build();

    expect(result.postal_code).toBe('');
  });

  test('Set postal code. Expected 11AF', () => {
    expect(new FakeShipToBuilder().SetPostalCode('11AF').Build().postal_code).toBe( '11AF' );
  });

  test('Set phone number. Expected 123456789', () => {
    expect( new FakeShipToBuilder().SetPhoneNumber('123456789').Build().phone_number ).toBe('123456789');
  });

  test('Set last name. Expected Kowalski', () => {
    expect(new FakeShipToBuilder().SetLastName('Kowalski').Build().last_name).toBe( 'Kowalski' );
  });

  test('Set name. Expected Piotr', () => {
    expect(new FakeShipToBuilder().SetName('Piotr').Build().name).toBe('Piotr');
  });

  test('Set first name. Expected Pawel', () => {
    expect(new FakeShipToBuilder().SetFirstName('Pawel').Build().first_name).toBe( 'Pawel' );
  });

  test('Set company name. Expected Pepsi Co', () => {
    expect( new FakeShipToBuilder().SetCompanyName('Pepsi Co').Build().company_name ).toBe('Pepsi Co');
  });

  test('Set Email address. Expected test@auctane.com', () => {
    expect(new FakeShipToBuilder().SetEmail('test@auctane.com').Build().email).toBe( 'test@auctane.com' );
  });

  test('Set province. Expected NY', () => {
    expect(new FakeShipToBuilder().SetStateProvince('NY').Build().state_province).toBe( 'NY' );
  });

  test('Set instructions. Expected Instructions', () => {
    expect( new FakeShipToBuilder().SetInstructions('Instructions').Build().instructions ).toBe('Instructions');
  });

  test('Set city. Expected Zielona', () => {
    expect( new FakeShipToBuilder().SetCity('Zielona') .Build().city_locality ).toBe('Zielona');
  });

  test('Set address details. Expected Kostrzynska and 4', () => {
    expect(
        new FakeShipToBuilder().SetAddressLine(['Kostrzynska', '4']) .Build().address_lines ).toStrictEqual(['Kostrzynska', '4']);
  });

  describe('Set default properties for specify country.', function () {
    test('Check CountryCode field. Expected PL.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.country_code).toBe('PL');
    });

    test('Check AddressLine field. Expected AddressLine1, AddressLine2, AddressLine3.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.address_lines).toStrictEqual(['AddressLine1', 'AddressLine2', 'AddressLine3']);
    });

    test('Check PostalCode field. Expected 65-001.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.postal_code).toBe('65-001');
    });

    test('Check AddressResidentialIndicator field. Expected No.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.address_residential_indicator).toBe(AddressResidentialIndicator.No);
    });

    test('Check CityLocality field. Expected Zielona Góra.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.city_locality).toBe('Zielona Góra');
    });

    test('Check CompanyName field. Expected Poland Company', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.company_name).toBe('Poland Company');
    });

    test('Check Email field. Expected polandcompany@test.com.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.email).toBe('polandcompany@test.com');
    });

    test('Check FirstName field. Expected Jan.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.first_name).toBe('Jan');
    });

    test('Check LastName field. Expected Kowalski.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.last_name).toBe('Kowalski');
    });

    test('Check Instructions field. Expected Instructions', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.instructions).toBe('Instructions');
    });

    test('Check IsEU field. Expected true.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.is_eu).toBe(true);
    });

    test('Check Name field. Expected Jan Kowalski', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.name).toBe('Jan Kowalski');
    });

    test('Check PhoneNumber field. Expected 68123456789', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.phone_number).toBe('68123456789');
    });

    test('Check StateProvince field. Expected empty.', () => {
      const result = new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry(Countries.PL)
          .Build();

      expect(result.state_province).toBe('');
    });

    test('Set not existing address. Should throw exception', () => {
      expect( () => new FakeShipToBuilder().SetDefaultAddressForSpecifiedCountry('ABC' as Countries)
          .Build()).toThrowError("The map doesn't contains following element.");
    });
  });
});

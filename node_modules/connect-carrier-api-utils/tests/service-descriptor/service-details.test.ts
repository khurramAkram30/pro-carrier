import {
  LabelSizesEnum,
  ServiceAttributesEnum,
  ServiceClassEnum,
  ServiceGradeEnum,
  ShippingService
} from '@shipengine/connect-carrier-api';
import { ServiceDetails } from '../../src/service-descriptor/service-details';
import { FakeCreateLabelRequestBuilder } from '../../src';

class CustomServiceDescriptor extends ServiceDetails {
  ServiceIdentifier = this.shippingService.ApiCode ?? '';

  constructor(shippingService: ShippingService) {
    super(shippingService);
  }
}

const StandardService: ShippingService = {
  Id: 'f0ddd145-58dc-4ef6-b883-7937b0cffeba',
  Name: 'Standard',
  Code: 'mail_delivery',
  ApiCode: 'mail_delivery',
  International: true,
  Abbreviation: 'mail_delivery',
  SupportedLabelSizes: [LabelSizesEnum.Inches4x6],
  SupportedCountries: [
    {
      FromCountry: 'GB'
    }
  ],
  Class: ServiceClassEnum.Ground,
  Grade: ServiceGradeEnum.Standard,
  ServiceAttributes: [ServiceAttributesEnum.Tracking]
};

describe('Service descriptor tests.', function () {
  let standardServiceDescriptor: ServiceDetails;
  let customServiceDescriptor: ServiceDetails;

  beforeEach(function () {
    standardServiceDescriptor = new ServiceDetails(StandardService);
    customServiceDescriptor = new CustomServiceDescriptor(StandardService);
  });

  test('Check if service details are stored into descriptor. Expected same object', () => {
    expect(standardServiceDescriptor.shippingService).toBe(StandardService);
  });

  test('Check if service code is used to validate activate service. Expected true', () => {
    expect(
      standardServiceDescriptor.IsServiceSelected(
        new FakeCreateLabelRequestBuilder().SetService('mail_delivery').Build(),
      ),
    ).toBeTruthy();
  });

  test('Check if service code is used to validate activate service. Expected false', () => {
    expect(
      standardServiceDescriptor.IsServiceSelected(
        new FakeCreateLabelRequestBuilder().SetService('Express').Build(),
      ),
    ).toBeFalsy();
  });

  test('Check if custom implementation use API_CODE to validate activate service. Expected true', () => {
    expect(
      customServiceDescriptor.IsServiceSelected(
        new FakeCreateLabelRequestBuilder().SetService('mail_delivery').Build(),
      ),
    ).toBeTruthy();
  });

  test('Check if custom implementation use API_CODE to validate activate service. Expected true', () => {
    expect(
      customServiceDescriptor.IsServiceSelected(
        new FakeCreateLabelRequestBuilder()
          .SetService('cargo_delivery')
          .Build(),
      ),
    ).toBeFalsy();
  });
});

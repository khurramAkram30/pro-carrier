import { BatchWriteCommand, BatchWriteCommandInput, DeleteCommand, QueryCommand, QueryCommandInput, QueryCommandOutput } from '@aws-sdk/lib-dynamodb';
import { DynamoDBConnectClient } from '../../src/dynamodb/dynamodb-connect-client';
import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';
import { mockClient } from 'aws-sdk-client-mock';

describe('DynamoDBConnectClient tests', () => {
    const dynamoDbDocumentClientMock = mockClient(DynamoDBDocumentClient);

    beforeAll(() => {
        mockClient(DynamoDBClient);
    });

    beforeEach(() => {
        dynamoDbDocumentClientMock.reset();
    });

    test('Constructor should create a new DynamoDBConnectClient instance', () => {
        // Act
        const instance = new DynamoDBConnectClient('test-table', 'eu-west-1');

        // Assert
        expect(instance).toBeInstanceOf(DynamoDBConnectClient);
    });

    test('Query should return an array of items', async () => {
        // Arrange
        const instance = new DynamoDBConnectClient('test-table', 'eu-west-1');
        const expected = [
            {
                id: '1'
            },
            {
                id: '2'
            }
        ];

        dynamoDbDocumentClientMock.on(QueryCommand)
            .resolvesOnce({
                Items: [
                    {
                        id: '1'
                    }
                ],
                LastEvaluatedKey: {
                    id: '1'
                }
            })
            .resolvesOnce({
                Items: [
                    {
                        id: '2'
                    }
                ]
            });

        // Act
        const actual = await instance.Query();

        // Assert
        expect(actual).toEqual(expected);
    });

    test('Write should write items to the database in batches', async () => {
        // Arrange
        const instance = new DynamoDBConnectClient('test-table', 'eu-west-1');
        const items = Array.from(Array(30).keys()).map((i) => {
            return {
                id: (i + 1).toString()
            };
        });

        dynamoDbDocumentClientMock.on(BatchWriteCommand).resolves({});

        // Act
        await instance.Write(items);

        // Assert
        expect((dynamoDbDocumentClientMock.call(0).args[0].input as BatchWriteCommandInput).RequestItems?.['test-table'].length).toEqual(25);
        expect((dynamoDbDocumentClientMock.call(1).args[0].input as BatchWriteCommandInput).RequestItems?.['test-table'].length).toEqual(5);
    });

    test('Delete should delete items from the database in batches', async () => {
        // Arrange
        const instance = new DynamoDBConnectClient('test-table', 'eu-west-1');
        const items = Array.from(Array(30).keys()).map((i) => {
            return {
                id: (i + 1).toString()
            };
        });

        dynamoDbDocumentClientMock.on(BatchWriteCommand).resolves({});

        // Act
        await instance.Delete(items);

        // Assert
        expect((dynamoDbDocumentClientMock.call(0).args[0].input as BatchWriteCommandInput).RequestItems?.['test-table'].length).toEqual(25);
        expect((dynamoDbDocumentClientMock.call(1).args[0].input as BatchWriteCommandInput).RequestItems?.['test-table'].length).toEqual(5);
    });
});

import { Package } from '@shipengine/connect-carrier-api';
import { NumberOfPackageValidator } from '../../../../../src/validations';
import { FakeCreateLabelRequestBuilder, FakePackageBuilder } from '../../../../../src';

describe('validate number of packages rule tests', function () {
  test('Provided more packages than allowed. Expected error.', () => {
    const packages: Package[] = [
      new FakePackageBuilder().Build(),
      new FakePackageBuilder().Build(),
      new FakePackageBuilder().Build()
    ];
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new NumberOfPackageValidator(2).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('The number of packages must be between 1 and 2');
  });

  test('Packages are not provided. Expected error.', () => {
    const packages: Package[] = [];
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new NumberOfPackageValidator(2).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe(
      'The package is mandatory. Please provide at least one package.',
    );
  });

  test('Multipackage not allowed, send a few packages. Expected error.', () => {
    const packages: Package[] = [new FakePackageBuilder().Build(), new FakePackageBuilder().Build()];
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new NumberOfPackageValidator(1).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Multi parcel is not allowed.');
  });

  test('Package number is equal to allowed. Expected success.', () => {
    const packages: Package[] = [new FakePackageBuilder().Build(), new FakePackageBuilder().Build()];
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new NumberOfPackageValidator(2).validate(request);

    expect(result.hasError()).toBeFalsy();
  });

  test('Custom number of packages in allowed range. Expected success.', () => {
    const packages: Package[] = [
      new FakePackageBuilder().Build(),
      new FakePackageBuilder().Build(),
      new FakePackageBuilder().Build()
    ];
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new NumberOfPackageValidator(5, 3).validate(request);

    expect(result.hasError()).toBeFalsy();
  });

  test('Number of packages below allowed. Expected error.', () => {
    const packages: Package[] = [
      new FakePackageBuilder().Build(),
      new FakePackageBuilder().Build()
    ];
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new NumberOfPackageValidator(5, 3).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('The number of packages must be between 3 and 5');
  });
});

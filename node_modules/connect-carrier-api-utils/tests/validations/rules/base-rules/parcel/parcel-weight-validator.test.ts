import { Package, WeightUnit } from '@shipengine/connect-carrier-api';
import { FakeCreateLabelRequestBuilder, FakePackageBuilder } from '../../../../../src';
import { ParcelWeightValidator } from '../../../../../src/validations';

describe('validate parcel weight rule tests', function () {
  let packages: Package[] = [new FakePackageBuilder().Build()];

  beforeEach(function () {
    packages = [new FakePackageBuilder().Build()];
  });

  test('Single package with 2001 grams weight provided. Validation allow to proceed shipment between 0 and 2000 grams. Expected error.', () => {
    packages[0]!.weight_details!.weight_in_grams = 2001;
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new ParcelWeightValidator(0, 2000)!.validate(request);

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Parcel weight is incorrect. Weight for package number 1 cannot exceed 2000 grams and have to be greater than 0 grams. Current value: 2001 grams.',
    );
  },
  );

  test('Multipackage where the first package has 2001 grams weight. Validation allow to proceed shipment between 0 and 2000 grams. Expected error.', () => {
    packages = [
      new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 2001 }).Build(),
      new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 1000 }).Build()
    ];
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new ParcelWeightValidator(0, 2000)!.validate(request);

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Parcel weight is incorrect. Weight for package number 1 cannot exceed 2000 grams and have to be greater than 0 grams. Current value: 2001 grams.',
    );
  },
  );

  test('Multipackage where the second package has 2001 grams weight. Validation allow to proceed shipment between 0 and 2000 grams. Expected error.', () => {
    packages = [
      new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 1000 }).Build(),
      new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 2001 }).Build()
    ];
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages(packages)
      .Build();

    const result = new ParcelWeightValidator(0, 2000)!.validate(request);

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Parcel weight is incorrect. Weight for package number 2 cannot exceed 2000 grams and have to be greater than 0 grams. Current value: 2001 grams.',
    );
  },
  );

  test(
    'Multipackage where both packages have excited weight. Expected error.',
    () => {
      packages = [
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 2001 }).Build(),
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 2001 }).Build()
      ];
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(0, 2000)!.validate(request);

      expect(result!.hasError())!.toBeTruthy();
      expect(result!.getMessages())!
        .toBe(`Parcel weight is incorrect. Weight for package number 1 cannot exceed 2000 grams and have to be greater than 0 grams. Current value: 2001 grams.
Parcel weight is incorrect. Weight for package number 2 cannot exceed 2000 grams and have to be greater than 0 grams. Current value: 2001 grams.`);
    },
  );

  test(
    'Single package with 999 grams weight provided. Validation allow to proceed shipment between 1000 and 2000 grams. Expected error.',
    () => {
      packages[0]!.weight_details!.weight_in_grams = 999;
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(1000, 2000)!.validate(request);

      expect(result!.hasError())!.toBeTruthy();
      expect(result!.getMessages())!.toBe(
        'Parcel weight is incorrect. Weight for package number 1 cannot exceed 2000 grams and have to be greater than 1000 grams. Current value: 999 grams.',
      );
    },
  );

  test('Multipackage where the first package has 999 grams weight. Validation allow to proceed shipment between 1000 and 2000 grams. Expected error.',
    () => {
      packages = [
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 999 }).Build(),
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 1500 }).Build()
      ];
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(1000, 2000)!.validate(request);

      expect(result!.hasError())!.toBeTruthy();
      expect(result!.getMessages())!.toBe(
        'Parcel weight is incorrect. Weight for package number 1 cannot exceed 2000 grams and have to be greater than 1000 grams. Current value: 999 grams.',
      );
    },
  );

  test('Multipackage where the second package has 999 grams weight. Validation allow to proceed shipment between 1000 and 2000 grams. Expected error.',
    () => {
      packages = [
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 1500 }).Build(),
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 999 }).Build()
      ];
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(1000, 2000)!.validate(request);

      expect(result!.hasError())!.toBeTruthy();
      expect(result!.getMessages())!.toBe(
        'Parcel weight is incorrect. Weight for package number 2 cannot exceed 2000 grams and have to be greater than 1000 grams. Current value: 999 grams.',
      );
    },
  );

  test!.each([1001, 1500, 1999])(
    'Single package tests. Weight is in allowed range. Expected success.',
    (weight: number) => {
      packages[0]!.weight_details!.weight_in_grams = weight;
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(1000, 2000)!.validate(request);

      expect(result!.hasError())!.toBeFalsy();
    },
  );

  test!.each([
    [1001, 1050],
    [1500, 1300],
    [1900, 1999]
  ])(
    'Multipackage tests. Weight is in allowed range. Expected success.',
    (firstPackageWeight: number, secondPackageWeight: number) => {
      packages = [
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: firstPackageWeight }).Build(),
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: secondPackageWeight }).Build()
      ];
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(1000, 2000)!.validate(request);

      expect(result!.hasError())!.toBeFalsy();
    },
  );

  test(
    'Single package weight is equal to max allowed. Expected success.',
    () => {
      packages[0]!.weight_details!.weight_in_grams = 1000;
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(10, 1000)!.validate(request);

      expect(result!.hasError())!.toBeFalsy();
    },
  );

  test('Multipackage weight is equal to max allowed. Expected success.',
    () => {
      packages = [
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 1000 }).Build(),
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 1000 }).Build()
      ];
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(10, 1000)!.validate(request);

      expect(result!.hasError())!.toBeFalsy();
    },
  );

  test(
    'Multipackage weight is equal to min allowed. Expected success.',
    () => {
      packages = [
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 1000 }).Build(),
        new FakePackageBuilder().SetWeightDetails({ source_weight_unit: WeightUnit.Grams, weight_in_grams: 1000 }).Build()
      ];
      const request = new FakeCreateLabelRequestBuilder()
        .SetPackages(packages)
        .Build();

      const result = new ParcelWeightValidator(1000, 5000)!.validate(request);

      expect(result!.hasError())!.toBeFalsy();
    },
  );

  test('Weight is undefined. Should be returned result error with precise message.', () => {
    const fakePackage = new FakePackageBuilder()
      .SetWeightDetails({
        source_weight: 0,
        source_weight_unit: WeightUnit.Grams,
        weight_in_ounces: 0,
        weight_in_grams: undefined
      })
      .Build();
    const request = new FakeCreateLabelRequestBuilder()
      .SetPackages([fakePackage])
      .Build();

    const result = new ParcelWeightValidator(0, 2000)!.validate(request);

    expect(result!.hasError()).toBeTruthy();
    expect(result!.getMessages()).toBe(
      'Weight in grams is undefined for shipment.',
    );
  });
});

import {
  CreateLabelRequest,
  DocumentFormat,
  LabelLayouts,
  ShipTo
} from '@shipengine/connect-carrier-api';
import {LabelSizeAndFormatValidator} from '../../../../../src/validations';

describe('ValidateInboundData label size and format rule tests', function () {
  let request: CreateLabelRequest;
  beforeEach(function () {
    request = {
      is_return_label: false,
      packages: [],
      ship_datetime: '',
      ship_from: undefined as any,
      ship_to: undefined as unknown as ShipTo,
      transaction_id: ''
    };
  });

  test.each([
    [LabelLayouts.Letter, [LabelLayouts.FourBySix]],
    [LabelLayouts.FourBySix, [LabelLayouts.Letter]]
  ])(
    'Validate if label layout is not supported. Expected error message.',
    (providedLayout: LabelLayouts, supportedLayouts: LabelLayouts[]) => {
      request.label_layout = providedLayout;
      request.label_format = DocumentFormat.Pdf;

      const result = new LabelSizeAndFormatValidator(supportedLayouts, [
        DocumentFormat.Pdf
      ]).validate(request);

      expect(result.getMessages()).toBe(`Provided label size is not supported by this carrier. Allowed values: ${supportedLayouts}. Current value: ${providedLayout}.`);
    },
  );

  test.each([
    [LabelLayouts.Letter, [LabelLayouts.Letter]],
    [LabelLayouts.FourBySix, [LabelLayouts.FourBySix]]
  ])(
    'Validate if label layout is supported. Expected success.',
    (providedLayout: LabelLayouts, supportedLayouts: LabelLayouts[]) => {
      request.label_layout = providedLayout;
      request.label_format = DocumentFormat.Pdf;

      const result = new LabelSizeAndFormatValidator(supportedLayouts, [
        DocumentFormat.Pdf
      ]).validate(request);

      expect(result.hasError()).toBeFalsy();
    },
  );

  test.each([
    [DocumentFormat.Zpl, [DocumentFormat.Pdf, DocumentFormat.Png]],
    [DocumentFormat.Pdf, [DocumentFormat.Zpl, DocumentFormat.Png]],
    [DocumentFormat.Png, [DocumentFormat.Pdf, DocumentFormat.Zpl]]
  ])(
    'Validate if label document format is not supported. Expected error message.',
    (providedFormat: DocumentFormat, supportedFormats: DocumentFormat[]) => {
      request.label_format = providedFormat;
      request.label_layout = LabelLayouts.Letter;

      const result = new LabelSizeAndFormatValidator(
        [LabelLayouts.Letter],
        supportedFormats,
      ).validate(request);

        expect(result.getMessages()).toBe(`Provided label format is not supported by this carrier. Allowed values: ${supportedFormats.join(', ')}. Current value: ${providedFormat}.`);
    },
  );

  test.each([
    [DocumentFormat.Zpl, [DocumentFormat.Zpl, DocumentFormat.Pdf]],
    [DocumentFormat.Pdf, [DocumentFormat.Pdf, DocumentFormat.Png]],
    [DocumentFormat.Png, [DocumentFormat.Png, DocumentFormat.Zpl]]
  ])(
    'Validate if label document format is supported. Expected success.',
    (providedFormat: DocumentFormat, supportedDocuments: DocumentFormat[]) => {
      request.label_format = providedFormat;
      request.label_layout = LabelLayouts.Letter;

      const result = new LabelSizeAndFormatValidator(
        [LabelLayouts.Letter],
        supportedDocuments,
      ).validate(request);

      expect(result.hasError()).toBeFalsy();
    },
  );
});

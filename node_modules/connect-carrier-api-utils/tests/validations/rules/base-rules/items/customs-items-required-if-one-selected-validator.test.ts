import {CreateLabelRequest, CustomsContentTypes, ShipTo} from '@shipengine/connect-carrier-api';
import {FakeCustomItemBuilder, FakeCustomsBuilder, FakePackageBuilder} from '../../../../../src';
import {CustomsItemsRequiredIfOneSelectedValidator} from '../../../../../src/validations';

describe('all validate customs items are provided if any selected.', function () {
  let request: CreateLabelRequest;

  beforeEach(() => {
    request = {
      is_return_label: false,
      packages: [new FakePackageBuilder()
          .SetCustoms(
              new FakeCustomsBuilder()
                  .SetContents(CustomsContentTypes.Gift)
                  .SetCustomItem(new FakeCustomItemBuilder().SetDefault().Build()).Build())
          .Build()],
      ship_datetime: '',
      ship_from: undefined as any,
      ship_to: undefined as unknown as ShipTo,
      transaction_id: ''
    };
  });

  test('CustomsNodeNotProvided. Expected error and error message.', () => {
    request!.packages[0]!.customs = undefined;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package does not have customs information.',
    );
  });

  test('ContentsNotProvided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.contents = undefined as any;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package does not have customs contents information.',
    );
  });

  test('Customs items not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items = undefined as any;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package does not have customs items information.',
    );
  });

  test('Item harmonized not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.harmonized_tariff_code =
      undefined;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package customs item does not have harmonized tariff code information.',
    );
  });

  test('item value not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.value = undefined;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package customs item does not have value information.',
    );
  });

  test('item value amount not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.value = {
      amount: '',
      currency: 'PLN'
    };

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
        request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
        'Package customs item does not have value amount information.',
    );
  });

  test('item value currency not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.value = {
      amount: '100',
      currency: ''
    };

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
        request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
        'Package customs item does not have value currency information.',
    );
  });

  test('item sku not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.sku = undefined;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package customs item does not have sku information.',
    );
  });

  test('item description not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.description = undefined;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package customs item does not have description information.',
    );
  });

  test('item country of origin not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.country_of_origin =
      undefined;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package customs item does not have country of origin information.',
    );
  });

  test('item quantity not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.quantity = undefined;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package customs item does not have quantity information.',
    );
  });

  test('item sku description not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.sku_description =
      undefined;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package customs item does not have sku description information.',
    );
  });

  test('item weight not provided. Expected error and error message.', () => {
    request!.packages[0]!.customs!.customs_items[0]!.item_weight =
      undefined as any;

    const result = new CustomsItemsRequiredIfOneSelectedValidator()!.validate(
      request,
    );

    expect(result!.hasError())!.toBeTruthy();
    expect(result!.getMessages())!.toBe(
      'Package customs item does not have item weight information.',
    );
  });
});

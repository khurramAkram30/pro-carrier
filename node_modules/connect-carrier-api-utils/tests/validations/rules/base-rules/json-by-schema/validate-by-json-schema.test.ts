import { ConfirmationTypes, CreateLabelRequest, DimensionUnit, DocumentFormat, InsuranceProviders, LabelLayouts, WeightUnit } from '@shipengine/connect-carrier-api';
import { ValidateParametersBySchema } from '../../../../../src/validations/';

describe('Label content response tests', function () {
    let request: CreateLabelRequest;
    let schema: object;
    let validator: ValidateParametersBySchema;

    beforeEach(() => {
        request = {
            service_code: 'HOME',
            confirmation: ConfirmationTypes.None,
            label_format: DocumentFormat.Pdf,
            label_layout: LabelLayouts.FourBySix,
            ship_datetime: '2023-04-01T14:15:22Z',
            is_test_label: true,
            advanced_options: {
                contains_alcohol: true,
                no_postage: true,
                nonmachineable: true,
                saturday_delivery: true,
                tip: {
                    amount: 'string',
                    currency: 'string'
                },
                property1: null,
                property2: null
            },
            insurance_provider: InsuranceProviders.None,
            is_return_label: false,
            packages: [
                {
                    package_code: 'package',
                    dimension_details: {
                        dimensions_in_centimeters: {
                            length: 4,
                            width: 4,
                            height: 15
                        },
                        dimensions_in_inches: {
                            length: 10,
                            width: 10,
                            height: 45
                        },
                        source_dimension_unit: DimensionUnit.Centimeters
                    },
                    weight_details: {
                        weight_in_ounces: 2,
                        weight_in_grams: 500,
                        source_weight: 25,
                        source_weight_unit: WeightUnit.Grams
                    },
                    insured_value: {
                        amount: '200',
                        currency: 'GBP'
                    },
                    customs: {
                        customs_items: [
                            {
                                description: 'First custom, first package',
                                quantity: 1,
                                value:
                                {
                                    amount: '200',
                                    currency: 'GBP'
                                },
                                country_of_origin: 'JP',
                                harmonized_tariff_code: 'harmonized',
                                sku: 'SKU1',
                                sku_description: 'SKU1_desc',
                                item_weight: {
                                    weight_in_grams: 200,
                                    source_weight_unit: WeightUnit.Grams
                                }
                            }
                        ]
                    }
                }
            ],
            ship_to: {
                name: 'ReceiverFullName',
                first_name: 'ReceiverFirstName',
                last_name: 'ReceiverLastName',
                email: 'receiver@test.com',
                phone_number: '883689148',
                company_name: 'ReceiverCompanyName',
                instructions: 'Some receiver instruction',
                address_lines: [
                    'Receiver address Line 1',
                    'Receiver address Line 2'
                ],
                city_locality: 'ReceiverCity',
                state_province: 'ReceiverProvince',
                postal_code: '67-100',
                country_code: 'PL'
            },
            ship_from: {
                name: 'SenderFullName',
                first_name: 'SenderFirstName',
                last_name: 'SenderLastName',
                email: 'Sender@test.com',
                phone_number: '883689148',
                company_name: 'SenderCompanyName',
                instructions: 'Some Sender instruction',
                address_lines: [
                    'Sender address Line 1',
                    'Sender address Line 2'
                ],
                city_locality: 'SenderCity',
                state_province: 'SenderProvince',
                postal_code: '67-100',
                country_code: 'PL'
            },
            next_day: true,
            international: false,
            reference: 'RefNo001',
            transaction_id: '0fec1e58-b197-4052-99cf-2218496c5482',
            authorization: {
                access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjEiLCJyb2xlIjoiVXNlciIsIm5iZiI6MTY2NzM5MTUwMCwiZXhwIjoxNjY3NDA1OTAwLCJpYXQiOjE2NjczOTE1MDB9.xTtRL2ffADkBFQNxDNYv7e8T_u85N6oifKBPApEM6no',
                connection_context: {
                    property1: 'string',
                    property2: 'string'
                }
            },
            metadata: {
                access_token: 'Ckp0rrgqWuFuUj2SxmDKQM',
                username: 'test',
                password: 'test',
                client_id: '123456',
                expires_in: 1667389730.101
            }
        };

        schema = {
            type: 'object',
            properties: {
                packages: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            customs: {
                                type: 'object',
                                properties: {
                                    customs_items: {
                                        type: 'array',
                                        items: {
                                            type: 'object',
                                            properties: {
                                                description: {
                                                    type: 'string',
                                                    minLength: 1
                                                },
                                                quantity: {
                                                    type: 'number',
                                                    minimum: 1,
                                                    maximum: 20
                                                },
                                                value: {
                                                    type: 'object',
                                                    properties: {
                                                        amount: {
                                                            type: 'string',
                                                            pattern: '^(?=.*[1-9])\\d*(?:\\.\\d*)?$',
                                                            minLength: 1
                                                        },
                                                        currency: {
                                                            type: 'string',
                                                            minLength: 1
                                                        }
                                                    },
                                                    required: ['amount', 'currency']
                                                }
                                            },
                                            required: ['description', 'quantity', 'value']
                                        }
                                    }
                                },
                                required: ['customs_items']
                            },
                            insured_value: {
                                type: 'object',
                                properties: {
                                    amount: {
                                        type: 'string',
                                        minLength: 1
                                    }
                                },
                                required: ['amount']
                            }
                        },
                        required: ['customs', 'insured_value']
                    }
                },
                ship_to: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        first_name: {
                            type: 'string'
                        },
                        last_name: {
                            type: 'string',
                            minLength: 1
                        },
                        company_name: {
                            type: 'string',
                            minLength: 3
                        },
                        postal_code: {
                            type: 'string',
                            maxLength: 10
                        },
                        email: {
                            type: 'string',
                            enum: ['test@test.com', 'receiver@test.com']
                        }
                    },
                    required: ['name', 'first_name']
                }
            },
            required: ['packages']
        };

        validator = new ValidateParametersBySchema(schema);
    });

    test('ValidateParametersBySchema, request is correct', () => {
        const result = validator.validate(request);

        expect(result.hasError()).toBeFalsy();
    });

    test.each([
        [undefined, 'FirstName', 'Required parameter \'/ship_to/name\' is missing.'],
        ['Name', undefined, 'Required parameter \'/ship_to/first_name\' is missing.']
    ])('ValidateParametersBySchema, missing required parameters', (name: string | undefined, firstName: string | undefined, expectedMessage: string) => {
        request.ship_to.name = name;
        request.ship_to.first_name = firstName;

        const result = validator.validate(request);

        expect(result.getMessages()).toEqual(expectedMessage);
    });

    test.each([
        ['0'],
        ['abc']
    ])('ValidateParametersBySchema, parameter has incorrect pattern', (amount: string) => {
        request.packages[0].customs = {
            customs_items: [
                {
                    description: 'First custom, first package',
                    quantity: 1,
                    value:
                    {
                        amount: amount,
                        currency: 'GBP'
                    },
                    country_of_origin: 'JP',
                    harmonized_tariff_code: 'harmonized',
                    sku: 'SKU1',
                    sku_description: 'SKU1_desc',
                    item_weight: {
                        weight_in_grams: 200,
                        source_weight_unit: WeightUnit.Grams
                    }
                }
            ]
        };

        const result = validator.validate(request);

        expect(result.getMessages()).toEqual('Parameter \'/packages/0/customs/customs_items/0/value/amount\' has incorrect value.');
    });

    test.each([
        [0],
        [-1],
        [0.1]
    ])('ValidateParametersBySchema, provided parameter is under minium required value', (quantity: number) => {
        request.packages[0].customs = {
            customs_items: [
                {
                    description: 'First custom, first package',
                    quantity: quantity,
                    value:
                    {
                        amount: '200',
                        currency: 'GBP'
                    },
                    country_of_origin: 'JP',
                    harmonized_tariff_code: 'harmonized',
                    sku: 'SKU1',
                    sku_description: 'SKU1_desc',
                    item_weight: {
                        weight_in_grams: 200,
                        source_weight_unit: WeightUnit.Grams
                    }
                }
            ]
        };

        const result = validator.validate(request);

        expect(result.getMessages()).toEqual('Value of parameter \'/packages/0/customs/customs_items/0/quantity\' must be bigger or equal to 1.');
    });

    test.each([
        ['', 'companyName', 'Value of parameter \'/ship_to/last_name\' is required.'],
        ['lastName', 'CO', 'Value of \'/ship_to/company_name\' must not have fewer than 3 characters.']
    ])('ValidateParametersBySchema, provided parameter is under minimum length', (last_name: string, company_name: string, expectedErrorMessage) => {
        request.ship_to.last_name = last_name;
        request.ship_to.company_name = company_name;

        const result = validator.validate(request);

        expect(result.getMessages()).toEqual(expectedErrorMessage);
    });

    test.each([
        ['12345678901'],
        ['1-2-3-4-5-6']
    ])('ValidateParametersBySchema, provided parameter is over maximum length', (postal_code: string) => {
        request.ship_to.postal_code = postal_code;

        const result = validator.validate(request);

        expect(result.getMessages()).toEqual('Value of \'/ship_to/postal_code\' cannot be longer than than 10 characters.');
    });

    test.each([
        [20.1],
        [21]
    ])('ValidateParametersBySchema, provided parameter is over maximum value', (quantity: number) => {
        request.packages[0].customs = {
            customs_items: [
                {
                    description: 'First custom, first package',
                    quantity: quantity,
                    value:
                    {
                        amount: '200',
                        currency: 'GBP'
                    },
                    country_of_origin: 'JP',
                    harmonized_tariff_code: 'harmonized',
                    sku: 'SKU1',
                    sku_description: 'SKU1_desc',
                    item_weight: {
                        weight_in_grams: 200,
                        source_weight_unit: WeightUnit.Grams
                    }
                }
            ]
        };

        const result = validator.validate(request);

        expect(result.getMessages()).toEqual('Value of parameter \'/packages/0/customs/customs_items/0/quantity\' must be less or equal to 20.');
    });

    test('ValidateParametersBySchema, provided parameter is not in enum', () => {
        request.ship_to.email = 'some@test.com';

        const result = validator.validate(request);

        expect(result.getMessages()).toEqual('Value of parameter \'/ship_to/email\' is incorrect.');
    });
});
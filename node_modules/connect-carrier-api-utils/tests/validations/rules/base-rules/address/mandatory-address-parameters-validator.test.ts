import { AddressBase } from '@shipengine/connect-carrier-api';
import {AddressFields, AddressType, MandatoryAddressParametersValidator} from '../../../../../src/validations';
import {FakeCreateLabelRequestBuilder, FakeShipFromBuilder, FakeShipToBuilder} from '../../../../../src';

describe('validate mandatory address parameters rules', function () {
  let sender: AddressBase = new FakeShipFromBuilder().Build();
  let receiver: AddressBase = new FakeShipToBuilder().Build();

  beforeEach(function () {
    sender = new FakeShipToBuilder().Build();
    receiver = new FakeShipFromBuilder().Build();
  });

  test('All sender parameters are provided. Expected success.', () => {
    sender.country_code = 'Poland';
    const request = new FakeCreateLabelRequestBuilder()
      .SetSender(sender)
      .Build();

    const result = new MandatoryAddressParametersValidator(AddressType.Sender, [
      AddressFields.Country
    ]).validate(request);

    expect(result.hasError()).toBeFalsy();
  });

  test('All receiver parameters are provided. Expected Success', () => {
    receiver.country_code = 'Poland';
    const request = new FakeCreateLabelRequestBuilder()
      .SetReceiver(receiver)
      .Build();

    const result = new MandatoryAddressParametersValidator(
      AddressType.Receiver,
      [AddressFields.Country],
    ).validate(request);

    expect(result.hasError()).toBeFalsy();
  });

  test('Sender country is empty. Expected correct error message', () => {
    sender.country_code = '';
    const request = new FakeCreateLabelRequestBuilder()
        .SetSender(sender)
        .Build();

    const result = new MandatoryAddressParametersValidator(AddressType.Sender, [
      AddressFields.Country
    ]).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Sender country is required.');
  });

  test('Receiver country is empty. Expected correct error message.', () => {
    receiver.country_code = '';
    const request = new FakeCreateLabelRequestBuilder()
        .SetReceiver(receiver)
        .Build();

    const result = new MandatoryAddressParametersValidator(
        AddressType.Receiver,
        [AddressFields.Country],
    ).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Receiver country is required.');
  });

  test('Sender name is empty. Expected correct error message.', () => {
    sender.name = '';
    const request = new FakeCreateLabelRequestBuilder()
        .SetSender(sender)
        .Build();

    const result = new MandatoryAddressParametersValidator(AddressType.Sender, [
      AddressFields.Name
    ]).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Sender name is required.');

  });

  test('Receiver name is empty. Expected correct error message', () => {
    receiver.name = '';
    const request = new FakeCreateLabelRequestBuilder()
        .SetReceiver(receiver)
        .Build();

    const result = new MandatoryAddressParametersValidator(
        AddressType.Receiver,
        [AddressFields.Name],
    ).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Receiver name is required.');
  });

  test('Receiver phone number. Expected correct error message.', () => {
    receiver.phone_number = '';
    const request = new FakeCreateLabelRequestBuilder()
      .SetReceiver(receiver)
      .Build();

    const result = new MandatoryAddressParametersValidator(AddressType.Sender, [
      AddressFields.PhoneNumber
    ]).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Sender phone number is required.');
  });

  test('Sender phone number is empty. Expected correct error message.', () => {
    sender.phone_number = '';
    const request = new FakeCreateLabelRequestBuilder()
      .SetSender(sender)
      .Build();

    const result = new MandatoryAddressParametersValidator(AddressType.Sender, [
      AddressFields.PhoneNumber
    ]).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Sender phone number is required.');
  });

  test('Sender address line 0 is empty. Expected correct error message.', () => {
    sender.address_lines = [''];
    const request = new FakeCreateLabelRequestBuilder()
        .SetSender(sender)
        .Build();

    const result = new MandatoryAddressParametersValidator(AddressType.Sender, [
      AddressFields.AddressLine0
    ]).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Sender first line of the address is required.');
  });

  test('Receiver address line 0 is empty. Expected correct error message.', () => {
    receiver.address_lines = [''];
    const request = new FakeCreateLabelRequestBuilder()
        .SetReceiver(receiver)
        .Build();

    const result = new MandatoryAddressParametersValidator(
        AddressType.Receiver,
        [AddressFields.AddressLine0],
    ).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Receiver first line of the address is required.');
  });

  test('Sender city locality is empty. Expected correct error message.', () => {
    sender.city_locality = '';
    const request = new FakeCreateLabelRequestBuilder()
        .SetSender(sender)
        .Build();

    const result = new MandatoryAddressParametersValidator(AddressType.Sender, [
      AddressFields.City
    ]).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Sender city is required.');
  });

  test('Receiver city locality is empty. Expected correct error message.', () => {
    receiver.city_locality = '';
    const request = new FakeCreateLabelRequestBuilder()
        .SetReceiver(receiver)
        .Build();

    const result = new MandatoryAddressParametersValidator(
        AddressType.Receiver,
        [AddressFields.City],
    ).validate(request);

    expect(result.hasError()).toBeTruthy();
    expect(result.getMessages()).toBe('Receiver city is required.');
  });
});

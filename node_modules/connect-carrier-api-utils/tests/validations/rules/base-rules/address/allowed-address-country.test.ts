import { CreateLabelRequest, DimensionUnit } from '@shipengine/connect-carrier-api';
import { AddressType, CheckAllowedAddressCountry } from '../../../../../src/validations';

describe('Allowed address country validator tests', function () {

    let request: CreateLabelRequest;

    beforeEach(() => {
        request = {
            service_code: 'HOME',
            ship_datetime: '2023-04-01T14:15:22Z',
            is_return_label: false,
            packages: [
                {
                    dimension_details: {
                        dimensions_in_centimeters: {
                            length: 4,
                            width: 4,
                            height: 15
                        },
                        dimensions_in_inches: {
                            length: 10,
                            width: 10,
                            height: 45
                        },
                        source_dimension_unit: DimensionUnit.Centimeters
                    },
                    insured_value: {
                        amount: '200',
                        currency: 'GBP'
                    }
                }
            ],
            ship_to: {
                name: 'ReceiverFullName',
                first_name: 'ReceiverFirstName',
                last_name: 'ReceiverLastName',
                email: 'receiver@test.com',
                phone_number: '883689148',
                company_name: 'ReceiverCompanyName',
                instructions: 'Some receiver instruction',
                address_lines: [
                    'Receiver address Line 1',
                    'Receiver address Line 2'
                ],
                city_locality: 'ReceiverCity',
                state_province: 'ReceiverProvince',
                postal_code: '67-100',
                country_code: 'PL'
            },
            ship_from: {
                name: 'SenderFullName',
                first_name: 'SenderFirstName',
                last_name: 'SenderLastName',
                email: 'Sender@test.com',
                phone_number: '883689148',
                company_name: 'SenderCompanyName',
                instructions: 'Some Sender instruction',
                address_lines: [
                    'Sender address Line 1',
                    'Sender address Line 2'
                ],
                city_locality: 'SenderCity',
                state_province: 'SenderProvince',
                postal_code: '67-100',
                country_code: 'PL'
            },
            transaction_id: '0fec1e58-b197-4052-99cf-2218496c5482'
        };
    });

    test.each([
        ['PL', ['PL', 'DE'], AddressType.Receiver],
        ['PL', ['PL', 'DE'], AddressType.Sender]
    ])('CheckAllowedAddressCountry, country is allowed', (countryCode: string, allowedCountries: string[], addressType: AddressType) => {
        request.ship_to.country_code = countryCode;
        request.ship_from.country_code = countryCode;

        const validator = new CheckAllowedAddressCountry(allowedCountries, addressType);

        const result = validator.validate(request);

        expect(result.hasError()).toBeFalsy();
    });

    test.each([
        ['GB', ['PL', 'DE'], AddressType.Receiver, 'The Receiver country code is not allowed.'],
        ['GB', ['PL', 'DE'], AddressType.Sender, 'The Sender country code is not allowed.']
    ])('CheckAllowedAddressCountry, country is allowed', (countryCode: string, allowedCountries: string[], addressType: AddressType, expectedErrorMessage: string) => {
        request.ship_to.country_code = countryCode;
        request.ship_from.country_code = countryCode;

        const validator = new CheckAllowedAddressCountry(allowedCountries, addressType);

        const result = validator.validate(request);

        expect(result.getMessages()).toEqual(expectedErrorMessage);
    });
});
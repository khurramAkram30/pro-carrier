import {
  CustomValidationRule,
  Result,
  ValidationExecutor
} from '../../src/validations';
import {
  LabelSizesEnum,
  ServiceAttributesEnum,
  ServiceClassEnum,
  ServiceGradeEnum,
  ShippingService
} from '@shipengine/connect-carrier-api';
import { ValidationPlan } from '../../src/validations/validation-plan';
import { FakeCreateLabelRequestBuilder } from '../../src';
import { ServiceDetails } from '../../src/service-descriptor/service-details';

class FakeFirstValidation implements CustomValidationRule {
  validate(): Result {
    return Result.Error('Error No. 1');
  }
}

class FakeSecondValidation implements CustomValidationRule {
  validate(): Result {
    return Result.Error('Error No. 2');
  }
}

const StandardService: ShippingService = {
  Id: 'f0ddd145-58dc-4ef6-b883-7937b0cffeba',
  Name: 'Standard',
  Code: 'mail_delivery',
  ApiCode: 'mail_delivery',
  International: true,
  Abbreviation: 'mail_delivery',
  SupportedLabelSizes: [LabelSizesEnum.Inches4x6],
  SupportedCountries: [
    {
      FromCountry: 'GB'
    }
  ],
  Class: ServiceClassEnum.Ground,
  Grade: ServiceGradeEnum.Standard,
  ServiceAttributes: [ServiceAttributesEnum.Tracking]
};

describe('validate plan executor tests', function () {
  test('validations should failed ones. Expected one error message', () => {
    const validationPlan = new ValidationPlan(
      new Map([
        [
          new ServiceDetails(StandardService),
          [new FakeFirstValidation(), new FakeSecondValidation()]
        ]
      ]),
    );

    const validationExecutor = new ValidationExecutor(validationPlan);

    expect(() =>
      validationExecutor.execute(
        new FakeCreateLabelRequestBuilder().SetService('mail_delivery').Build(),
      ),
    ).toThrowError('Error No. 1\nError No. 2');
  });

  test('validations should failed if validations for service are not defined. Expected Error.', () => {
    const validationPlan = new ValidationPlan(
      new Map([
        [
          new ServiceDetails(StandardService),
          [
            new FakeFirstValidation(),
            new FakeSecondValidation()
          ]
        ]
      ]),
    );

    const validationExecutor = new ValidationExecutor(validationPlan);

    expect(() =>
      validationExecutor.execute(
        new FakeCreateLabelRequestBuilder().SetService('Express').Build(),
      ),
    ).toThrowError('No validations found for active services');
  });
});

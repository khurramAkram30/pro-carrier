import {
  CustomValidationRule,
  Result
} from '../../src/validations';
import { ValidationPlan } from '../../src/validations/validation-plan';
import { FakeCreateLabelRequestBuilder } from '../../src';
import {
  LabelSizesEnum,
  ServiceAttributesEnum,
  ServiceClassEnum,
  ServiceGradeEnum,
  ShippingService
} from '@shipengine/connect-carrier-api';
import { ServiceDetails } from '../../src/service-descriptor/service-details';

const StandardService: ShippingService = {
  Id: 'f0ddd145-58dc-4ef6-b883-7937b0cffeba',
  Name: 'Standard',
  Code: 'mail_delivery',
  ApiCode: 'mail_delivery',
  International: true,
  Abbreviation: 'mail_delivery',
  SupportedLabelSizes: [LabelSizesEnum.Inches4x6],
  SupportedCountries: [
    {
      FromCountry: 'GB'
    }
  ],
  Class: ServiceClassEnum.Ground,
  Grade: ServiceGradeEnum.Standard,
  ServiceAttributes: [ServiceAttributesEnum.Tracking]
};

const ExpressService: ShippingService = {
  Id: 'f0ddd145-58dc-4ef6-b883-7937b0cffeba',
  Name: 'Express',
  Code: 'express_delivery',
  ApiCode: 'express_delivery',
  International: true,
  Abbreviation: 'express_delivery',
  SupportedLabelSizes: [LabelSizesEnum.Inches4x6],
  SupportedCountries: [
    {
      FromCountry: 'GB'
    }
  ],
  Class: ServiceClassEnum.Ground,
  Grade: ServiceGradeEnum.Standard,
  ServiceAttributes: [ServiceAttributesEnum.Tracking]
};

class FakeFirstValidation implements CustomValidationRule {
  validate(): Result {
    return Result.Error('Error No. 1');
  }
}

class FakeSecondValidation implements CustomValidationRule {
  validate(): Result {
    return Result.Error('Error No. 2');
  }
}

describe('Validation plan tests', function () {
  test.each([
    new Map([
      [
        new ServiceDetails(StandardService),
        [new FakeFirstValidation(), new FakeSecondValidation()]
      ],
      [new ServiceDetails(ExpressService), [new FakeFirstValidation()]]
    ]),
    new Map([
      [new ServiceDetails(ExpressService), [new FakeFirstValidation()]],
      [
        new ServiceDetails(StandardService),
        [new FakeFirstValidation(), new FakeSecondValidation()]
      ]
    ])
  ])(
    'getValidationRulesForActiveServices should get errors dedicated for Standard service. Expected collection with 2 validations.',
    (serviceValidationCollection) => {
      const request = new FakeCreateLabelRequestBuilder()
        .SetService('mail_delivery')
        .Build();
      const validationPlan = new ValidationPlan(serviceValidationCollection);

      const result =
        validationPlan.getValidationRulesForActiveServices(request);

      expect(result!.length).toBe(2);
    },
  );

  test('Add new validation in shipping process time. The Express service should contains 2 validations.', () => {
    const expressServiceDetails = new ServiceDetails(ExpressService);
    const request = new FakeCreateLabelRequestBuilder()
      .SetService('express_delivery')
      .Build();
    const validationPlan = new ValidationPlan(
      new Map([
        [
          new ServiceDetails(StandardService),
          [new FakeFirstValidation(), new FakeSecondValidation()]
        ],
        [expressServiceDetails, [new FakeFirstValidation()]]
      ]),
    );

    validationPlan.addValidation(
      expressServiceDetails,
      new FakeSecondValidation(),
    );
    const result = validationPlan.getValidationRulesForActiveServices(request);

    expect(result!.length).toBe(2);
  });
});

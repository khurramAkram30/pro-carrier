import { ModuleThirdPartyConnector, RefreshDEMO } from './module-third-party-connector';
import { ThirdPartyRequest } from '../../src/third-party-connector/request/third-party-request';
import { ThirdPartyMethods } from '../../src/third-party-connector/third-party-methods';
import { ThirdPartyRequestResponseTypeArrayBuffer } from '../../src/third-party-connector/request/decorators/third-party-request-response-type-array-buffer';
import { ThirdPartyConnectorAuthentication } from '../../src/third-party-connector/connector/decorators/third-party-connector-authentication';
import { RequestExpectedStatuses } from '../../src/third-party-connector/connector/request-expected-statuses';
import { ModuleThirdPartyConnectorXML } from './module-third-party-connector-xml';
import { ThirdPartyConnectorXmlResponse } from '../../src/third-party-connector/connector/decorators/third-party-connector-xml-response';
import { ErrorTestModel, ResponseTestModel, TokenModel } from './test-dto-models';

jest.mock('../../src/third-party-connector/connector/third-party-connector-helper');

test('Use BaseSendRequest', async () => {
    const moduleThirdPartyConnectorImplementation = new ModuleThirdPartyConnector(); // generic class extended by module one to include the response and error models

    const standardRequest = new ThirdPartyRequest()
        .Method(ThirdPartyMethods.GET)
        .Url('http://localhost:5099/Test')
        .Body({});

    const response = await moduleThirdPartyConnectorImplementation.SendRequest<ResponseTestModel, ErrorTestModel>(standardRequest); // we can cast the response to the carrier response model without checking because standard implementation already throw an error if the response is not the correct type

    expect(response!.test1).toBe('test');
});

test('Not Standard Request', async () => {
    const moduleThirdPartyConnectorImplementation =
        new ModuleThirdPartyConnector(); // generic class extended by module one to include the response and error models

    const standardRequest = new ThirdPartyRequest()
        .Method(ThirdPartyMethods.GET)
        .Url('https://www.google.com')
        .Body({}); // create a standard request

    const decoratedRequest = new ThirdPartyRequestResponseTypeArrayBuffer(
        standardRequest,
    );

    const response = await moduleThirdPartyConnectorImplementation.SendRequest<ResponseTestModel, any>(decoratedRequest);

    expect(response!.test1).toBe('test');

});

test('Use BaseSendRequest', async () => {
    const moduleThirdPartyConnectorImplementation = new ThirdPartyConnectorAuthentication(new ModuleThirdPartyConnector(), new RefreshDEMO({ apiKey: 'key' }), [401, 403]); // generic class extended by module one to include the response and error models

    const standardRequest = new ThirdPartyRequest()
        .Method(ThirdPartyMethods.GET)
        .Url('http://localhost:5099/Test')
        .Body({});

    const response = (await moduleThirdPartyConnectorImplementation.SendRequestWithExpectedStatuses<ResponseTestModel, ErrorTestModel>(standardRequest, new RequestExpectedStatuses([200], [404]))) as ResponseTestModel; // we can cast the response to the carrier response model without checking because standard implementation already throw an error if the response is not the correct type

    expect(response.test1).toBe('test');
});

describe('Request is built correctly', function () {
    test('check URL', () => {
        const request = new ThirdPartyRequest()
            .Method(ThirdPartyMethods.GET)
            .Url('https://www.google.com')
            .Body({});

        expect(request.ThirdPartyRequestProvider.url).toBe(
            'https://www.google.com',
        );
    });

    test('check Method', () => {
        const request = new ThirdPartyRequest()
            .Method(ThirdPartyMethods.GET)
            .Url('https://www.google.com')
            .Body({});

        expect(request.ThirdPartyRequestProvider.method).toBe('GET');
    });

    test('check Body', () => {
        const request = new ThirdPartyRequest()
            .Method(ThirdPartyMethods.GET)
            .Url('https://www.google.com')
            .Body({
                test1: 'test'
            });

        expect(request.ThirdPartyRequestProvider.data).toStrictEqual({
            test1: 'test'
        });
    });

    test('check Header', () => {
        const request = new ThirdPartyRequest()
            .Method(ThirdPartyMethods.GET)
            .Url('https://www.google.com')
            .Header({
                key: 'testKey',
                value: 'testValue'
            });

        expect(request.ThirdPartyRequestProvider.headers).toStrictEqual({
            key: 'testKey',
            value: 'testValue'
        });
    });

    test('check Headers', () => {
        const request = new ThirdPartyRequest()
            .Method(ThirdPartyMethods.GET)
            .Url('https://www.google.com')
            .Headers([
                {
                    key: 'testKey',
                    value: 'testValue'
                },
                {
                    key2: 'testKey2',
                    value2: 'testValue2'
                }
            ]);

        expect(request.ThirdPartyRequestProvider.headers).toStrictEqual({
            key: 'testKey',
            value: 'testValue',
            key2: 'testKey2',
            value2: 'testValue2'
        });
    });
});

describe('response encoding support base 64 decorator', function () {
    test('', () => {
        const request = new ThirdPartyRequest()
            .Method(ThirdPartyMethods.GET)
            .Url('https://www.google.com')
            .Body({});

        const decoratedRequest = new ThirdPartyRequestResponseTypeArrayBuffer(request);

        expect(decoratedRequest.ThirdPartyRequestProvider.responseType).toBe(
            'arraybuffer',
        );
    });
});

describe('Handling XML response type ', function () {

    test('decorator for third party request', async () => {
        const moduleThirdPartyConnectorImplementation = new ThirdPartyConnectorXmlResponse(new ModuleThirdPartyConnectorXML());
        const standardRequest = new ThirdPartyRequest()
            .Method(ThirdPartyMethods.POST)
            .Url('http://localhost:5099/Auth/xml')
            .Body({});

        const response = await moduleThirdPartyConnectorImplementation.SendRequest<TokenModel, undefined>(standardRequest);

        expect(response!.Token).toBe('token');
        expect(response!.ArrayToken.Col[0].Name).toBe('1');
    });
});
import {RefreshTokenAlwaysRequiredRefreshTestImpl} from './refresh-token-always-required-refresh-test-impl';
import {RefreshTokenTestImpl} from './refresh-token-test-impl';
import {ThirdPartyConnector} from '../../../../src/third-party-connector/connector/third-party-connector';
import {ThirdPartyConnectorAuthentication} from '../../../../src/third-party-connector/connector/decorators/third-party-connector-authentication';
import {ThirdPartyRequest} from '../../../../src/third-party-connector/request/third-party-request';
import {RequestExpectedStatusesNullObject} from '../../../../src/third-party-connector/connector/request-expected-statuses';
import {ThirdPartyMethods} from '../../../../src/third-party-connector/third-party-methods';

describe('ThirdPartyConnectorAuthentication', () => {

    describe('Refresh token is required', () => {
        const baseConnector = new ThirdPartyConnector('CarrierName');
        beforeAll(() => {
            jest.spyOn(ThirdPartyConnector.prototype, 'SendRequest').mockImplementation(async () => ({tst: 'test'}));
            jest.spyOn(ThirdPartyConnector.prototype, 'SendRequestWithExpectedStatuses').mockImplementation(async () => ({tst: 'test'}));
        });

        afterAll(() => {
            jest.restoreAllMocks();
        });

        test('Send request. If refresh token is required. Expected always run RefreshBehaviour.', async () => {

            const refreshTokenImplementation = new RefreshTokenAlwaysRequiredRefreshTestImpl();
            const spyOn = jest.spyOn(refreshTokenImplementation, 'RefreshBehaviour');
            const connector = new ThirdPartyConnectorAuthentication(baseConnector, refreshTokenImplementation, [404]);

            await connector.SendRequest<any, any>(new ThirdPartyRequest());

            expect(spyOn).toHaveBeenCalled();
        });

        test('Send request. If refresh token is required. Expected always run ApplyRefreshBehaviour.', async () => {

            const refreshTokenImplementation = new RefreshTokenAlwaysRequiredRefreshTestImpl();
            const spyOn = jest.spyOn(refreshTokenImplementation, 'ApplyRefreshBehaviour');
            const connector = new ThirdPartyConnectorAuthentication(baseConnector, refreshTokenImplementation, [404]);

            await connector.SendRequest(new ThirdPartyRequest());

            expect(spyOn).toHaveBeenCalled();
        });

        test('Send request with expected statuses. If refresh token is required. Expected always run RefreshBehaviour.', async () => {

            const refreshTokenImplementation = new RefreshTokenAlwaysRequiredRefreshTestImpl();
            const spyOn = jest.spyOn(refreshTokenImplementation, 'RefreshBehaviour');
            const connector = new ThirdPartyConnectorAuthentication(baseConnector, refreshTokenImplementation, [404]);

            await connector.SendRequestWithExpectedStatuses<any, any>(new ThirdPartyRequest(), new RequestExpectedStatusesNullObject());

            expect(spyOn).toHaveBeenCalled();
        });

        test('Send request with expected statuses. If refresh token is required. Expected always run ApplyRefreshBehaviour.', async () => {

            const refreshTokenImplementation = new RefreshTokenAlwaysRequiredRefreshTestImpl();
            const spyOn = jest.spyOn(refreshTokenImplementation, 'ApplyRefreshBehaviour');
            const connector = new ThirdPartyConnectorAuthentication(baseConnector, refreshTokenImplementation, [404]);

            await connector.SendRequestWithExpectedStatuses<any, any>(new ThirdPartyRequest(), new RequestExpectedStatusesNullObject());

            expect(spyOn).toHaveBeenCalled();
        });
    });

    describe('Base request failed, make an refresh based on failed code.', () => {
        const baseConnector = new ThirdPartyConnector('CarrierName');
        beforeAll(() => {
            //jest.spyOn(ThirdPartyConnector.prototype, 'SendRequestWithExpectedStatuses').mockImplementation(async () => await {tst: "test"});
        });

        afterAll(() => {
            jest.restoreAllMocks();
        });

        test('Send request and set up 401 unauthorized expected error. Refresh token is required. Expected to run ApplyRefreshBehaviour.', async () => {

            const refreshTokenImplementation = new RefreshTokenTestImpl();
            jest.spyOn(ThirdPartyConnector.prototype, 'SendRequestWithExpectedStatuses').mockImplementation(() => { throw new Error('Status code: 401'); });
            jest.spyOn(ThirdPartyConnector.prototype, 'SendRequest').mockImplementation(async () => await ({tst: 'test'}));

            const spyOn = jest.spyOn(refreshTokenImplementation, 'ApplyRefreshBehaviour');
            const connector = new ThirdPartyConnectorAuthentication(baseConnector, refreshTokenImplementation, [401]);

            try{
                await connector.SendRequestWithExpectedStatuses<any, any>(new ThirdPartyRequest().Url('http://localhost:5099/Auth/').Method(ThirdPartyMethods.POST), new RequestExpectedStatusesNullObject());
            }catch (e) {}
            finally {
                expect(spyOn).toHaveBeenCalled();
            }
        });

        test('Send request and set up 401 unauthorized expected error. Refresh token is required. Expected to run RefreshBehaviour.', async () => {

            const refreshTokenImplementation = new RefreshTokenTestImpl();
            jest.spyOn(ThirdPartyConnector.prototype, 'SendRequestWithExpectedStatuses').mockImplementation(() => { throw new Error('Status code: 401'); });

            const spyOn = jest.spyOn(refreshTokenImplementation, 'RefreshBehaviour');
            const connector = new ThirdPartyConnectorAuthentication(baseConnector, refreshTokenImplementation, [401]);

            try{
                await connector.SendRequestWithExpectedStatuses<any, any>(new ThirdPartyRequest().Url('http://localhost:5099/Auth/').Method(ThirdPartyMethods.POST), new RequestExpectedStatusesNullObject());
            }catch (e) {}
            finally {
                expect(spyOn).toHaveBeenCalled();
            }
        });
    });
});
import {GetGUID, GetSafeValueFromMap, GetValueFromMetadata} from '../../src';

describe('General helper tests', function () {

  describe('GetGUID tests', function () {
    test('Check if correct GUID format is generated', () => {
      const result = GetGUID();

      expect(result).toMatch(
          new RegExp(
              '^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$',
          ),
      );
    });

    test('Check if guid is unique. Expected two different GUIDs.', () => {
      const guidNo1 = GetGUID();
      const guidNo2 = GetGUID();

      expect(guidNo1).not.toBe(guidNo2);
    });
  });

  describe('GetSafeValueFromMap tests', function () {
    const map = new Map<string, string>([
      ['key1', 'value1'],
      ['key2', 'value2'],
      ['key3', 'value3']
    ]);

    test.each([
      ['key1', 'value1'],
      ['key2', 'value2'],
      ['key3', 'value3']
    ])('Get existing value from the map. Expected %s.', (key: string, expectedValue: string) => {
      const result = GetSafeValueFromMap(map, key);

      expect(result).toBe(expectedValue);
    });

    test('Get not existing value from the map. Expected correct error message.', () => {
      expect(() => GetSafeValueFromMap(map, 'not_existing')).toThrow('The map doesn\'t contains following element.');
    });
  });

  describe('GetValueFromMetadata tests.', function () {
    test('Check if client_id value is returned. Expected Auctane.', () => {
      const result = GetValueFromMetadata('client_id', {
        client_id: 'Auctane'
      });

      expect(result).toBe('Auctane');
    });

    test('Check if undefined key throw exception. Expected empty string.', () => {
      const result = GetValueFromMetadata('client_id', {
        id: 'bdf4a6f8-5685-4e52-a9bb-8f1c7639abae'
      });

      expect(result).toBe('');
    });
  });
});

import { ArrayBufferToBase64, CheckAndSubstringText, CheckIfMandatoryParametersAreProvided, FormatUrl, FormatUtcDate, GetFirstNotEmpty, GetSafeString, StringToBase64 } from '../../src';

jest
  .useFakeTimers()
  .setSystemTime(new Date('2023-03-20 11:07:35.123 UTC'));

describe('string helper tests', function () {
  describe('GetFirstNotEmpty', () => {
    test('Provide not empty string as a second value. Expected a.', () => {
      const firstNotEmpty = GetFirstNotEmpty('', 'a', 'b', 'c');

      expect(firstNotEmpty).toBe('a');
    });

    test('Provide correct string as a third value, after null and undefined. Expected b.', () => {
      // @ts-ignore because of casting null to string
      const firstNotEmpty = GetFirstNotEmpty(null, undefined, 'b', 'c');

      expect(firstNotEmpty).toBe('b');
    });

    test('Provide empty array. Expected empty string', () => {
      const firstNotEmpty = GetFirstNotEmpty();

      expect(firstNotEmpty).toBe('');
    });
  });

  describe('checkAndSubstringText', function () {
    test('Cut krosno to 3 characters. Expected kro', () => {
      const result = CheckAndSubstringText('krosno', 3);

      expect(result).toBe('kro');
    });

    test('Provided value is null. Expected empty string.', () => {
      // @ts-ignore because of casting null to string
      const result = CheckAndSubstringText(null, 5);

      expect(result).toBe('');
    });

    test('Provided value is undefined. Expected empty string.', () => {
      // @ts-ignore because of casting undefined to string
      const result = CheckAndSubstringText(undefined, 5);

      expect(result).toBe('');
    });

    test('Provide as expected lenght null. Expected odrzanskie', () => {
      // @ts-ignore because of casting null to number
      const result = CheckAndSubstringText('odrzanskie', null);

      expect(result).toBe('odrzanskie');
    });

    test('Provide as expected lenght undefined. Expected odrzanskie', () => {
      // @ts-ignore because of casting undefined to number
      const result = CheckAndSubstringText('odrzanskie', undefined);

      expect(result).toBe('odrzanskie');
    });

    test('Provided word is shorter than expected length. Expected odrzanskie.', () => {
      const result = CheckAndSubstringText('odrzanskie', 30);

      expect(result).toBe('odrzanskie');
    });
  });

  describe('formatUrl', function () {
    test('The url has slash on last position and resource has slash on the first position. The slashes shouldn`t be duplicated. Expected well formatted url.', () => {
      const result = FormatUrl('https://www.google.com/', '/api/v1');

      expect(result).toBe('https://www.google.com/api/v1');
    });

    test('The url has slash on last position and resource has slash on the first position. The slashes shouldn`t be duplicated. Expected not duplicated.', () => {
      const result = FormatUrl('https://www.google.com/', '/api/v1');

      expect(result).not.toBe('https://www.google.com//api/v1');
    });

    test('The url and resource should be concated', () => {
      const result = FormatUrl('https://www.google.com', '/api/v1');

      expect(result).toBe('https://www.google.com/api/v1');
    });

    test('The url and resource shouldn`t contain space between.', () => {
      const result = FormatUrl('https://www.google.com', '/api/v1');

      expect(result).not.toBe('https://www.google.com /api/v1');
    });

    test('Missing slash in resource and url. The url and resource should be concated. Expected well formatted url.', () => {
      const result = FormatUrl('https://www.google.com', 'api/v1');

      expect(result).toBe('https://www.google.com/api/v1');
    });

    test('The url and resource should be concated. Expected not missing resource part.', () => {
      const result = FormatUrl('https://www.google.com', 'api/v1');

      expect(result).not.toBe('https://www.google.com');
    });
  });

  describe('getSafeString', function () {
    test.each([
      [undefined, ''],
      [null, ''],
      ['correct string', 'correct string'],
      ['51', '51'],
      ['', '']
    ])(
      'Passing %s correct value should be returned. Expected %s',
      (value: any, expected: string) => {
        const result = GetSafeString(value);

        expect(result).toBe(expected);
      },
    );

    test.each([
      ['correct string', 'correct String'],
      ['51', '521'],
      ['z z', 'zz']
    ])(
      'Passing %s value that shouldn`t be modified. Not expected %s',
      (value: any, expected: string) => {
        const result = GetSafeString(value);

        expect(result).not.toBe(expected);
      },
    );
  });
});

describe('Check if Mandatory Parameters Are Provided', function () {
  test('Check If parameter is provided, empty value passed. Expected error City is not provided.', () => {
    expect(() =>
      CheckIfMandatoryParametersAreProvided(
        {
          parameterName: 'Sender.Country',
          parameterValue: 'Poland'
        },
        {
          parameterName: 'Sender.City',
          parameterValue: ''
        },
      ),
    ).toThrowError('Mandatory parameter Sender.City is not provided.');
  });

  test('Check If parameter is provided, undefined value passed. Expected error City is not provided.', () => {
    expect(() =>
      CheckIfMandatoryParametersAreProvided(
        {
          parameterName: 'Sender.Country',
          parameterValue: 'Poland'
        },
        {
          parameterName: 'Sender.City',
          parameterValue: undefined
        },
      ),
    ).toThrowError('Mandatory parameter Sender.City is not provided.');
  });

  test('Check If parameter is provided, null value passed. Expected error City is not provided.', () => {
    expect(() =>
      CheckIfMandatoryParametersAreProvided(
        {
          parameterName: 'Sender.Country',
          parameterValue: 'Poland'
        },
        {
          parameterName: 'Sender.City',
          parameterValue: null
        },
      ),
    ).toThrowError('Mandatory parameter Sender.City is not provided.');
  });
});

describe('ArrayBufferToBase64 tests', function () {
  test('Converts an ArrayBuffer to a base64 string', () => {
    const sampleArrayBuffer = new ArrayBuffer(8);
    const sampleArray = new Int8Array(sampleArrayBuffer);
    sampleArray.set([1, 2, 3, 4, 5, 6, 7, 8]);

    const result = ArrayBufferToBase64(sampleArrayBuffer);

    expect(result).toEqual('AQIDBAUGBwg=');
  });

  test('ArrayBuffer is empty', () => {
    const sampleArrayBuffer = new ArrayBuffer(0);

    const result = ArrayBufferToBase64(sampleArrayBuffer);

    expect(result).toEqual('');
  });
});

describe('StringToBase64 tests', function () {
  test('Converts a string to a base64 string', () => {
    const result = StringToBase64('Hello, world!');

    expect(result).toEqual('SGVsbG8sIHdvcmxkIQ==');
  });
});

describe('FormatUtcDate tests', function () {
  test.each([
    ['ddMMyyHHmmssfff', '200323110735123'],
    ['dd-MM-yy HH:mm:ss:fff', '20-03-23 11:07:35:123'],
    ['dd MM yyyy T-HH:mm', '20 03 2023 T-11:07']
  ])('Check formatUtcDate expected values', (format: string, expectedValue: string) => {
    const date = new Date(Date.now());

    const result = FormatUtcDate(date, format);

    expect(result).toEqual(expectedValue);
  });
});

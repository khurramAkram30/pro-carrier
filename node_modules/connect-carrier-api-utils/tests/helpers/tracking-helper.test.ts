import { GetTrackingNumber } from '../../src';
import {logger} from '@shipengine/connect-runtime';

describe('Test for tracking helper', function () {
  test('Check if get tracking number return correct identifier. Correct provided in first place. Expected 0123456789.', () => {
    expect(
      GetTrackingNumber([
        { value: '0123456789', type: 'tracking_number' },
        { value: 'SomeData', type: 'NotImportantOne' }
      ]),
    ).toBe('0123456789');
  });

  test('Check if get tracking number return correct identifier. Only correct provided. Expected 0123456789.', () => {
    expect(
      GetTrackingNumber([{ value: '0123456789', type: 'tracking_number' }]),
    ).toBe('0123456789');
  });

  test('Check if get tracking number return correct identifier. Provided a few identifiers, correct in the middle. Expected 0123456789.', () => {
    expect(
      GetTrackingNumber([
        { value: 'SomeData', type: 'NotImportantOne' },
        { value: '0123456789', type: 'tracking_number' },
        { value: 'SomeData11', type: 'Tst' }
      ]),
    ).toBe('0123456789');
  });

    test('Check if get tracking number throw information about missing tracking number. Expected exception about missing tracking number.', () => {
        expect( () =>
            GetTrackingNumber([
                { value: 'SomeData', type: 'NotImportantOne' },
                { value: 'SomeData11', type: 'Tst' }
            ]),
        ).toThrow('Missing value for tracking_number key.');
    });

    test('Check if get tracking number log error about missing tracking number. Expected execute log error method.', () => {
        const spyOn = jest.spyOn(logger, 'error');

        try{
            GetTrackingNumber([
                { value: 'SomeData', type: 'NotImportantOne' },
                { value: 'SomeData11', type: 'Tst' }
            ]);
        }
        catch(e) {}
        expect(spyOn).toHaveBeenCalled();
    });
});

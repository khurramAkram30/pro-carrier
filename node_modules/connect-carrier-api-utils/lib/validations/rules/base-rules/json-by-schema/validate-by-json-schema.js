"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateParametersBySchema = void 0;
const tslib_1 = require("tslib");
const result_1 = require("../../../result");
const logic_helper_1 = require("../../../../logic-helper");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
class ValidateParametersBySchema {
    validate(request) {
        var _a, _b, _c, _d, _e, _f;
        const result = new result_1.Result();
        const ajv = new ajv_1.default({ allErrors: true });
        let instancePath = '';
        const validate = ajv.compile(this.validateSchema);
        const isRequestValid = validate(request);
        if (!isRequestValid) {
            for (const error of validate.errors) {
                switch (error.keyword) {
                    case 'required':
                        result.addError(`Required parameter '${error.instancePath.concat('/', (_a = error.params) === null || _a === void 0 ? void 0 : _a.missingProperty)}' is missing.`);
                        break;
                    case 'pattern':
                        result.addError(`Parameter '${error.instancePath}' has incorrect value.`);
                        break;
                    case 'minimum':
                        result.addError(`Value of parameter '${error.instancePath}' must be bigger or equal to ${(_b = error.params) === null || _b === void 0 ? void 0 : _b.limit}.`);
                        break;
                    case 'minLength':
                        const minLengthLimit = (_c = error.params) === null || _c === void 0 ? void 0 : _c.limit;
                        instancePath = error.instancePath;
                        if (minLengthLimit === 1) {
                            result.addError(`Value of parameter '${instancePath}' is required.`);
                        }
                        else {
                            result.addError(`Value of '${instancePath}' must not have fewer than ${minLengthLimit} characters.`);
                        }
                        break;
                    case 'maxLength':
                        result.addError(`Value of '${error.instancePath}' cannot be longer than than ${(_d = error.params) === null || _d === void 0 ? void 0 : _d.limit} characters.`);
                        break;
                    case 'maximum':
                        result.addError(`Value of parameter '${error.instancePath}' must be less or equal to ${(_e = error.params) === null || _e === void 0 ? void 0 : _e.limit}.`);
                        break;
                    case 'enum':
                        instancePath = error.instancePath;
                        (0, logic_helper_1.LogError)(`Value of parameter '${instancePath}' is incorrect. Allowed values are ${(_f = error.params) === null || _f === void 0 ? void 0 : _f.allowedValues.join(', ')}.`);
                        result.addError(`Value of parameter '${instancePath}' is incorrect.`);
                        break;
                    default:
                        result.addError(`Validation of parameter '${error.instancePath}' returns error.`);
                        break;
                }
            }
        }
        return result;
    }
    constructor(validateSchema) {
        this.validateSchema = validateSchema;
    }
}
exports.ValidateParametersBySchema = ValidateParametersBySchema;
//# sourceMappingURL=validate-by-json-schema.js.map
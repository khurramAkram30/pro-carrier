"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckAllowedAddressCountry = void 0;
const custom_validation_helper_1 = require("../../../custom-validation-helper/custom-validation-helper");
const result_1 = require("../../../result");
const address_type_1 = require("./address-type");
const logic_helper_1 = require("../../../../logic-helper");
class CheckAllowedAddressCountry {
    validate(request) {
        const result = new result_1.Result();
        let countryCode = '';
        switch (this.addressType) {
            case address_type_1.AddressType.Sender:
                countryCode = request.ship_from.country_code;
                break;
            case address_type_1.AddressType.Receiver:
                countryCode = request.ship_to.country_code;
                break;
            default:
                break;
        }
        const isValueAllowed = (0, custom_validation_helper_1.IsValueAllowed)(countryCode, this.allowedCountries);
        if (!isValueAllowed) {
            (0, logic_helper_1.LogError)(`The ${this.addressType} country code is not allowed. Current provided value: ${countryCode}. Allowed values: ${this.allowedCountries.join(', ')}.`);
            result.addError(`The ${this.addressType} country code is not allowed.`);
        }
        return result;
    }
    constructor(allowedCountries, addressType) {
        this.addressType = address_type_1.AddressType.Receiver;
        this.allowedCountries = allowedCountries;
        this.addressType = addressType;
    }
}
exports.CheckAllowedAddressCountry = CheckAllowedAddressCountry;
//# sourceMappingURL=allowed-address-country.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LabelSizeAndFormatValidator = void 0;
const result_1 = require("../../../result");
class LabelSizeAndFormatValidator {
    constructor(supportedLabelLayouts, supportedLabelFormats) {
        this.supportedLabelLayouts = supportedLabelLayouts;
        this.supportedLabelFormats = supportedLabelFormats;
    }
    validate(request) {
        if (!this.supportedLabelFormats.includes(request.label_format)) {
            return result_1.Result.Error(`Provided label format is not supported by this carrier. Allowed values: ${this.supportedLabelFormats.join(', ')}. Current value: ${request.label_format}.`);
        }
        if (!this.supportedLabelLayouts.includes(request.label_layout)) {
            return result_1.Result.Error(`Provided label size is not supported by this carrier. Allowed values: ${this.supportedLabelLayouts.join(', ')}. Current value: ${request.label_layout}.`);
        }
        return result_1.Result.Success();
    }
}
exports.LabelSizeAndFormatValidator = LabelSizeAndFormatValidator;
//# sourceMappingURL=label-size-and-format-validator.js.map
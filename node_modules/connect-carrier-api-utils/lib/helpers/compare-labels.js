"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDirectory = exports.compareImages = exports.savePDFFile = void 0;
const tslib_1 = require("tslib");
const pdf_lib_1 = require("pdf-lib");
const fs = tslib_1.__importStar(require("fs"));
const pngjs_1 = require("pngjs");
// @ts-ignore
const pixelmatch_1 = tslib_1.__importDefault(require("pixelmatch"));
const pdf2pic_1 = require("pdf2pic");
const savePDFFile = async (pdfContent, fileName) => {
    const pdfDocument = await pdf_lib_1.PDFDocument.load(pdfContent);
    const pdfBytesLabel = await pdfDocument.save();
    fs.writeFileSync(`${fileName}.pdf`, pdfBytesLabel);
};
exports.savePDFFile = savePDFFile;
const convertPDFtoPNG = async (pdfPath, fileNameToBe) => {
    const options = {
        density: 100,
        quality: 100,
        saveFilename: fileNameToBe,
        width: 500,
        height: 700,
        savePath: './',
        format: 'png'
    };
    const convert = (0, pdf2pic_1.fromPath)(pdfPath, options);
    const pageToConvertAsImage = 1;
    return await convert(pageToConvertAsImage, { responseType: 'image' });
};
const getImageFromPNG = async (fileName) => {
    const loadPromise = Promise.resolve(pngjs_1.PNG.sync.read(fs.readFileSync(`labels/${fileName}.png`)));
    return loadPromise
        .then(function (png) {
        return {
            png,
            metadata: {
                height: png.height,
                width: png.width
            }
        };
    });
};
const compareImages = async (pdfPathExpectedOutput, pdfPathGenerated) => {
    if (!pdfPathExpectedOutput || !pdfPathGenerated) {
        console.log('given path does not exist');
        return;
    }
    await convertPDFtoPNG(pdfPathExpectedOutput, 'labels/expectedPNG');
    await convertPDFtoPNG(pdfPathGenerated, 'labels/generatedPNG');
    const img1 = await getImageFromPNG('expectedPNG.1');
    const img2 = await getImageFromPNG('generatedPNG.1');
    const width = img1.png.width;
    const height = img1.png.height;
    const diff = new pngjs_1.PNG({ width, height });
    return (0, pixelmatch_1.default)(img1.png.data, img2.png.data, diff.data, width, height, {
        threshold: 0.5
    });
};
exports.compareImages = compareImages;
const createDirectory = (directoryName) => {
    if (!fs.existsSync(directoryName)) {
        fs.mkdirSync(directoryName);
    }
};
exports.createDirectory = createDirectory;
//# sourceMappingURL=compare-labels.js.map
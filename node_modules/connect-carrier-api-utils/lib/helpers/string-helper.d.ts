/**
 * Return first not empty string from the collection
 * @param args collection of the words
 */
export declare const GetFirstNotEmpty: (...args: string[]) => string;
/**
 * Method return new string cut to specify maximum length
 * @param value string to cut
 * @param maximumLength expected length
 */
export declare const CheckAndSubstringText: (value: string, maximumLength: number) => string;
/**
 * Concat URL and resource.
 * @param apiUrl API url
 * @param resourceUrl resource
 */
export declare const FormatUrl: (apiUrl: string, resourceUrl: string) => string;
/**
 * Get safe string. In case a value is undefined return empty string.
 * @param value
 */
export declare const GetSafeString: (value: any) => string;
/**
 * Method dedicated to check list of the parameters if are provided. In case of missing value error is thrown.
 * @param params collection of combine parameter name and value
 */
export declare const CheckIfMandatoryParametersAreProvided: (...params: {
    parameterName: string;
    parameterValue: any;
}[]) => void;
/**
 *  Formats the given date to the given format converted to UTC time zone
 *
 *   Mapped values:
 *
 *     yyyy - full year
 *
 *     yy - simplified year ex. 2023 - 23
 *
 *     MM - month
 *
 *     dd - day
 *
 *     HH - hour
 *
 *     mm - minutes
 *
 *     ss - seconds
 *
 *     fff - milliseconds
 *
 *     ff - milliseconds with 2 digits
 *
 * @param date - date object with given date which will be convert to UTC time zone
 * @param  format - string of format ex. 'yyyyMMddHHmmss'
 *
 * @remarks All values besides year are padded to 2 digit format to keep leading zeros. Ex. June - 06
 *
 * @returns Date in UTC time zone formatted to string
 *  */
export declare const FormatUtcDate: (date: Date, format: string) => string;
/**
 * Encode string to base64.
 *
 * @param value string to encode
 *
 * @returns base64 string
 */
export declare const StringToBase64: (value: string) => string;
/**
 * Encode provided ArrayBuffer to base64 string.
 *
 * @param buffer ArrayBuffer to encode
 *
 * @returns base64 string
 */
export declare const ArrayBufferToBase64: (buffer: ArrayBuffer) => string;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetValueFromMetadata = exports.GetSafeValueFromMap = exports.GetGUID = void 0;
const logic_helper_1 = require("../logic-helper");
/**
 * Return new GUID.
 */
const GetGUID = () => {
    let d = new Date().getTime();
    const guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);
    });
    return guid;
};
exports.GetGUID = GetGUID;
/**
 * Method return value from the map in the safe way. In case of the missing element the error is handled.
 * @param map values
 * @param value looking key
 */
const GetSafeValueFromMap = (map, value) => {
    if (map.has(value)) {
        return map.get(value);
    }
    const keys = [...map.keys()];
    (0, logic_helper_1.LogError)(`The map doesn't contains following element. Map: ${keys}, Value: ${value}`);
    (0, logic_helper_1.HandleError)("The map doesn't contains following element.");
};
exports.GetSafeValueFromMap = GetSafeValueFromMap;
/**
 * Method return value from the metadata object in the safe way. In case of the missing element, empty string is returned.
 * @param key
 * @param metadata
 */
const GetValueFromMetadata = (key, metadata) => {
    var _a;
    let value = '';
    try {
        // @ts-ignore
        value = (_a = metadata[key]) !== null && _a !== void 0 ? _a : '';
    }
    catch (error) {
        (0, logic_helper_1.LogError)(error);
    }
    finally {
        if (value === '') {
            (0, logic_helper_1.LogInfo)(`The metadata doesn't contains following element. Key: ${key}`);
        }
    }
    return value;
};
exports.GetValueFromMetadata = GetValueFromMetadata;
//# sourceMappingURL=helper.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetFeatureFlag = void 0;
const tslib_1 = require("tslib");
const LaunchDarkly = tslib_1.__importStar(require("@launchdarkly/node-server-sdk"));
const logic_helper_1 = require("../logic-helper");
const sdkKey = process.env.LAUNCH_DARKLY_SDK_KEY;
const GetFeatureFlag = async (featureFlagKey, sellerId) => {
    if (!sdkKey) {
        (0, logic_helper_1.LogInfo)('SDK key for LaunchDarkly is not defined');
        return false;
    }
    const context = {
        'kind': 'user',
        'key': sellerId
    };
    const client = LaunchDarkly.init(sdkKey);
    try {
        await client.waitForInitialization();
        (0, logic_helper_1.LogInfo)('SDK successfully initialized!');
        return await new Promise((resolve, reject) => {
            client.variation(featureFlagKey, context, false, (err, featureValue) => {
                client.track('event-called', context);
                if (featureValue || featureValue === false) {
                    (0, logic_helper_1.LogInfo)(`Connect feature flag + ${featureFlagKey} is ${featureValue} for this context`);
                    resolve(featureValue);
                }
                else {
                    (0, logic_helper_1.LogInfo)(`Connect feature flag + ${featureFlagKey} is undefined for this context`);
                    resolve(false);
                }
                (0, logic_helper_1.LogInfo)(err);
                client.flush(() => {
                    client.close();
                });
            });
        });
    }
    catch (error) {
        (0, logic_helper_1.LogInfo)(`Error while trying to get connect feature flag value: ${error}`);
        return false;
    }
};
exports.GetFeatureFlag = GetFeatureFlag;
//# sourceMappingURL=feature-flags.js.map
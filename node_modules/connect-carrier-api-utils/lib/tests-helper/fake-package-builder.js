"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakePackageBuilder = void 0;
const connect_carrier_api_1 = require("@shipengine/connect-carrier-api");
const fake_customs_builder_1 = require("./fake-customs-builder");
class FakePackageBuilder {
    constructor() {
        this.Build = () => {
            return this.package;
        };
        this.SetPackageCode = (packageCode) => {
            this.package.package_code = packageCode;
            return this;
        };
        this.SetWeightDetails = (weightDetails) => {
            this.package.weight_details = {
                weight_in_grams: weightDetails.weight_in_grams,
                source_weight_unit: weightDetails.source_weight_unit,
                source_weight: weightDetails.source_weight,
                weight_in_ounces: weightDetails.weight_in_ounces
            };
            return this;
        };
        this.SetLabelMessages = (labelMessage) => {
            this.package.label_messages = labelMessage;
            return this;
        };
        this.SetCustoms = (customs) => {
            this.package.customs = customs;
            return this;
        };
        this.SetInsuredValue = (insuredValue) => {
            this.package.insured_value = insuredValue;
            return this;
        };
        this.SetDimensions = (dimensionDetails) => {
            this.package.dimension_details = {
                dimensions_in_centimeters: dimensionDetails.dimensions_in_centimeters,
                dimensions_in_inches: dimensionDetails.dimensions_in_inches,
                source_dimensions: dimensionDetails.source_dimensions,
                source_dimension_unit: dimensionDetails.source_dimension_unit
            };
            return this;
        };
        this.package = {
            dimension_details: {
                source_dimension_unit: connect_carrier_api_1.DimensionUnit.Centimeters
            },
            insured_value: {
                currency: '',
                amount: '100'
            },
            label_messages: {
                reference1: 'label reference1',
                reference2: 'label reference2',
                reference3: 'label reference3'
            },
            weight_details: {
                source_weight_unit: connect_carrier_api_1.WeightUnit.Grams
            },
            customs: new fake_customs_builder_1.FakeCustomsBuilder().Build()
        };
    }
}
exports.FakePackageBuilder = FakePackageBuilder;
//# sourceMappingURL=fake-package-builder.js.map
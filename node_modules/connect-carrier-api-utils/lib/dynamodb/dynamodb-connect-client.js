"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDBConnectClient = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
/**
 * A wrapper around the DynamoDBDocumentClient that provides a simple interface for querying and writing to DynamoDB, suitable for connect apps.
 */
class DynamoDBConnectClient {
    constructor(tableName, region, endpoint, credentials) {
        /**
         * Queries DynamoDB for items based on the provided request parameters.
         * @param keyConditionExpression
         * @param expressionAttributeValues
         * @param filterExpression
         * @param expressionAttributeNames
         * @returns An array of items returned by the query.
         */
        this.Query = async (keyConditionExpression, expressionAttributeValues, filterExpression, expressionAttributeNames) => {
            let result = [];
            let scanFinished = false;
            let lastEvaluatedKey;
            while (!scanFinished) {
                const command = new lib_dynamodb_1.QueryCommand({
                    TableName: this.tableName,
                    KeyConditionExpression: keyConditionExpression,
                    FilterExpression: filterExpression,
                    ExpressionAttributeValues: expressionAttributeValues,
                    ExpressionAttributeNames: expressionAttributeNames,
                    ExclusiveStartKey: lastEvaluatedKey,
                });
                const response = await this.documentClient.send(command);
                result = result.concat(response.Items);
                if (response.LastEvaluatedKey) {
                    lastEvaluatedKey = response.LastEvaluatedKey;
                }
                else {
                    scanFinished = true;
                }
            }
            return result;
        };
        /**
         * Writes items to DynamoDB.
         * @param items
         */
        this.Write = async (items) => {
            const batches = this.SplitIntoBatches(items);
            await Promise.all(batches.map(async (batch) => {
                const req = {
                    RequestItems: {
                        [this.tableName]: batch.map((data) => ({
                            PutRequest: {
                                TableName: this.tableName,
                                Item: data
                            }
                        }))
                    }
                };
                return this.documentClient.send(new lib_dynamodb_1.BatchWriteCommand(req));
            }));
        };
        /**
         * Deletes items from DynamoDB based on the provided request parameters.
         * @param keys
         * @param conditionExpression
         * @param expressionAttributeValues
         * @param expressionAttributeNames
         */
        this.Delete = async (keys, conditionExpression, expressionAttributeValues, expressionAttributeNames) => {
            const batches = this.SplitIntoBatches(keys);
            await Promise.all(batches.map(async (batch) => {
                const req = {
                    RequestItems: {
                        [this.tableName]: batch.map((key) => {
                            return {
                                DeleteRequest: {
                                    Key: key,
                                    ConditionExpression: conditionExpression,
                                    ExpressionAttributeNames: expressionAttributeValues,
                                    ExpressionAttributeValues: expressionAttributeNames
                                }
                            };
                        })
                    }
                };
                return this.documentClient.send(new lib_dynamodb_1.BatchWriteCommand(req));
            }));
        };
        /**
         * Splits an array into batches of 25 items.
         * @param input
         * @returns An array of batches.
         */
        this.SplitIntoBatches = (input) => {
            const batches = [];
            while (input.length) {
                batches.push(input.splice(0, 25));
            }
            return batches;
        };
        const config = {
            region: region,
            endpoint: endpoint,
            credentials: credentials
        };
        this.tableName = tableName;
        this.client = new client_dynamodb_1.DynamoDBClient(config);
        this.documentClient = lib_dynamodb_1.DynamoDBDocumentClient.from(this.client);
    }
}
exports.DynamoDBConnectClient = DynamoDBConnectClient;
//# sourceMappingURL=dynamodb-connect-client.js.map
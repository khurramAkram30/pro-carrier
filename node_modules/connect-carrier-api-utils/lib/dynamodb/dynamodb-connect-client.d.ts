import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';
import { AwsCredentialIdentity, Provider } from '@aws-sdk/types';
/**
 * A wrapper around the DynamoDBDocumentClient that provides a simple interface for querying and writing to DynamoDB, suitable for connect apps.
 */
export declare class DynamoDBConnectClient {
    protected tableName: string;
    protected client: DynamoDBClient;
    protected documentClient: DynamoDBDocumentClient;
    constructor(tableName: string, region: string, endpoint?: string, credentials?: AwsCredentialIdentity | Provider<AwsCredentialIdentity>);
    /**
     * Queries DynamoDB for items based on the provided request parameters.
     * @param keyConditionExpression
     * @param expressionAttributeValues
     * @param filterExpression
     * @param expressionAttributeNames
     * @returns An array of items returned by the query.
     */
    Query: <ItemType>(keyConditionExpression?: string, expressionAttributeValues?: Record<string, any>, filterExpression?: string, expressionAttributeNames?: Record<string, string>) => Promise<ItemType[]>;
    /**
     * Writes items to DynamoDB.
     * @param items
     */
    Write: (items: object[]) => Promise<void>;
    /**
     * Deletes items from DynamoDB based on the provided request parameters.
     * @param keys
     * @param conditionExpression
     * @param expressionAttributeValues
     * @param expressionAttributeNames
     */
    Delete: (keys: Record<string, any>[], conditionExpression?: string, expressionAttributeValues?: Record<string, any>, expressionAttributeNames?: Record<string, string>) => Promise<void>;
    /**
     * Splits an array into batches of 25 items.
     * @param input
     * @returns An array of batches.
     */
    protected SplitIntoBatches: <T>(input: T[]) => T[][];
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThirdPartySoapConnector = void 0;
const soap_1 = require("soap");
const third_party_soap_response_1 = require("../request/third-party-soap-response");
const xml2js_1 = require("xml2js");
const soap_error_1 = require("../errors/soap-error");
/**
 * A connector for third party SOAP services.
 */
class ThirdPartySoapConnector {
    constructor() {
        this.xmlParser = new xml2js_1.Parser({ async: false });
    }
    /**
     * Initializes the underlying SOAP client.
     * @param wsdlUrl {string} The URL to the WSDL file.
     */
    async Initialize(wsdlUrl) {
        this.client = await (0, soap_1.createClientAsync)(wsdlUrl);
    }
    /**
     * Adds a custom namespace to the SOAP envelope.
     * @param name {string} The name of the namespace.
     * @param value {string} The URL for the namespace.
     */
    AddCustomNamespaceToEnvelope(name, value) {
        if (!this.client) {
            throw new Error('Tried to add custom namespace to envelope without initializing the client.');
        }
        this.client.wsdl.xmlnsInEnvelope += ` xmlns:${name}="${value}"`;
    }
    /**
     * Set the SOAP headers.
     * @param headers The headers to set.
     */
    SetSoapHeaders(headers) {
        if (!this.client) {
            throw new Error('Tried to set SOAP headers without initializing the client.');
        }
        this.client.clearSoapHeaders();
        for (const [key, value] of Object.entries(headers)) {
            this.client.addSoapHeader({ [key]: value });
        }
    }
    /**
     * Update a single SOAP header based on its name.
     * @param key {string} Name of the SOAP header.
     * @param value {string} New value for the SOAP header.
     */
    UpdateSoapHeader(key, value) {
        if (!this.client) {
            throw new Error('Tried to set SOAP headers without initializing the client.');
        }
        const headers = this.GetSoapHeaders();
        const headerIndex = Object.keys(headers).findIndex((headerKey) => headerKey === key);
        if (headerIndex === -1) {
            this.client.addSoapHeader({ [key]: value });
        }
        else {
            this.client.changeSoapHeader(headerIndex, { [key]: value });
        }
    }
    /**
     * Get the SOAP headers.
     * @returns The SOAP headers as a key:value object.
     */
    GetSoapHeaders() {
        if (!this.client) {
            throw new Error('Tried to get SOAP headers without initializing the client.');
        }
        const rawHeaders = this.client.getSoapHeaders();
        let headers = {};
        for (const rawHeader of rawHeaders) {
            let parsedHeader = {};
            this.xmlParser.parseString(rawHeader, (error, result) => {
                if (error) {
                    throw new Error(`An error occured while parsing a SOAP header '${rawHeader}'. Error: ${error}`);
                }
                else {
                    parsedHeader = result;
                }
            });
            headers = Object.assign(Object.assign({}, headers), parsedHeader);
        }
        return headers;
    }
    /**
     * Send a SOAP request and retrieve a response.
     * @param request The request to send.
     * @returns The response returned by the SOAP method.
     * @throws SoapError
     */
    async SendRequest(request) {
        if (!this.client) {
            throw new Error('Tried to send a SOAP request without initializing the client.');
        }
        if (!request.method) {
            throw new Error('Tried to send a SOAP request without a method defined.');
        }
        let response = [];
        try {
            response = await this.client[`${request.method}Async`](request.data, {});
        }
        catch (exception) {
            this.HandleException(exception, request);
        }
        return new third_party_soap_response_1.ThirdPartySoapResponse(response[0], response[2]);
    }
    /**
     * Handle an exception that occured when calling a SOAP method.
     * @param exception The exception that occured.
     * @param request The request that caused the exception.
     * @throws SoapError
     */
    HandleException(exception, request) {
        throw new soap_error_1.SoapError(`An unexpected exception occured while calling SOAP method "${request.method}".`, request, exception);
    }
}
exports.ThirdPartySoapConnector = ThirdPartySoapConnector;
//# sourceMappingURL=third-party-soap-connector.js.map
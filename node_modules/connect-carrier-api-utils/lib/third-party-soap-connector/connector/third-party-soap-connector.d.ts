import { IThirdPartySoapConnector } from './i-third-party-soap-connector';
import { ThirdPartySoapRequest } from '../request/third-party-soap-request';
import { ThirdPartySoapResponse } from '../request/third-party-soap-response';
/**
 * A connector for third party SOAP services.
 */
export declare class ThirdPartySoapConnector implements IThirdPartySoapConnector {
    private client;
    private xmlParser;
    constructor();
    /**
     * Initializes the underlying SOAP client.
     * @param wsdlUrl {string} The URL to the WSDL file.
     */
    Initialize(wsdlUrl: string): Promise<void>;
    /**
     * Adds a custom namespace to the SOAP envelope.
     * @param name {string} The name of the namespace.
     * @param value {string} The URL for the namespace.
     */
    AddCustomNamespaceToEnvelope(name: string, value: string): void;
    /**
     * Set the SOAP headers.
     * @param headers The headers to set.
     */
    SetSoapHeaders(headers: {
        [key: string]: string;
    }): void;
    /**
     * Update a single SOAP header based on its name.
     * @param key {string} Name of the SOAP header.
     * @param value {string} New value for the SOAP header.
     */
    UpdateSoapHeader(key: string, value: string): void;
    /**
     * Get the SOAP headers.
     * @returns The SOAP headers as a key:value object.
     */
    GetSoapHeaders(): {
        [key: string]: string;
    };
    /**
     * Send a SOAP request and retrieve a response.
     * @param request The request to send.
     * @returns The response returned by the SOAP method.
     * @throws SoapError
     */
    SendRequest<RequestType, ResponseType>(request: ThirdPartySoapRequest<RequestType>): Promise<ThirdPartySoapResponse<ResponseType>>;
    /**
     * Handle an exception that occured when calling a SOAP method.
     * @param exception The exception that occured.
     * @param request The request that caused the exception.
     * @throws SoapError
     */
    HandleException<RequestType>(exception: unknown, request: ThirdPartySoapRequest<RequestType>): void;
}

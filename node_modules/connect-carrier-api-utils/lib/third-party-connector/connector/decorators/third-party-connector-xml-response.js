"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThirdPartyConnectorXmlResponse = void 0;
const request_expected_statuses_1 = require("../request-expected-statuses");
const xml2js_1 = require("xml2js");
const logic_helper_1 = require("../../../logic-helper");
const response_schema_types_1 = require("../response-schema-types");
class ThirdPartyConnectorXmlResponse {
    /**
     * Decorator can be used as a handle xml response.
     * @param base your master third party connector that wish you to execute
     * @param refreshAuthProcess determinate when and how to refresh auth - it might be implementation for bearer token, basic auth etc.
     * @param unauthorizedStatuses specified statuses codes that suggest to execute reauth attempt implementation.
     */
    constructor(base, callback = (response) => {
        return (0, xml2js_1.parseStringPromise)(response, { explicitArray: false, explicitRoot: false, trim: true, mergeAttrs: false });
    }) {
        this.base = base;
        this.callback = callback;
        base.ResponseSchemaType = response_schema_types_1.ResponseSchemaTypes.XML;
    }
    /**
     * Method checks if is required to refresh auth before make a call to carrier API.
     * Also, if the API return specify status code or the refresh is required then implementation makes it for you.
     * Out of the box method supports save logs and handling errors
     * Also you can provide expected status codes for success or fail behaviour
     * @param request ThirdPartyRequest
     * @param requestExpectedStatuses RequestExpectedStatuses
     */
    async SendRequestWithExpectedStatuses(request, requestExpectedStatuses) {
        const response = await this.base.SendRequestWithExpectedStatuses(request, requestExpectedStatuses);
        if (!response) {
            (0, logic_helper_1.LogInfo)(`${this.base.CarrierName} module. Response is empty.`);
            return undefined;
        }
        (0, logic_helper_1.LogInfo)(`${this.base.CarrierName} module. Handle xml response. ${response}`);
        try {
            return await this.callback(response);
        }
        catch (exception) {
            (0, logic_helper_1.LogError)(`${this.base.CarrierName} module. Error while handle xml response. ${exception}`);
        }
    }
    /**
     * Method checks if is required to refresh auth before make a call to carrier API.
     * Also, if the API return specify status code or the refresh is required then implementation makes it for you.
     * Out of the box method supports save logs and handling errors
     * @param request ThirdPartyRequest
     */
    async SendRequest(request) {
        return await this.SendRequestWithExpectedStatuses(request, new request_expected_statuses_1.RequestExpectedStatusesNullObject());
    }
}
exports.ThirdPartyConnectorXmlResponse = ThirdPartyConnectorXmlResponse;
//# sourceMappingURL=third-party-connector-xml-response.js.map
import { IThirdPartyConnector } from '../i-third-party-connector';
import { IRefreshAuthProcess } from '../i-refresh-auth-process';
import { ThirdPartyRequest } from '../../request/third-party-request';
import { RequestExpectedStatuses } from '../request-expected-statuses';
import { ThirdPartyConnector } from '../third-party-connector';
export declare class ThirdPartyConnectorAuthentication implements IThirdPartyConnector {
    readonly base: ThirdPartyConnector;
    readonly refreshAuthProcess: IRefreshAuthProcess;
    readonly unauthorizedStatuses: number[];
    /**
     * Decorator can be used as a auto auth refresh behaviour.
     * @param base your master third party connector that wish you to execute
     * @param refreshAuthProcess determinate when and how to refresh auth - it might be implementation for bearer token, basic auth etc.
     * @param unauthorizedStatuses specified statuses codes that suggest to execute reauth attempt implementation.
     */
    constructor(base: ThirdPartyConnector, refreshAuthProcess: IRefreshAuthProcess, unauthorizedStatuses: number[]);
    /**
     * Method checks if is required to refresh auth before make a call to carrier API.
     * Also, if the API return specify status code or the refresh is required then implementation makes it for you.
     * Out of the box method supports save logs and handling errors
     * Also you can provide expected status codes for success or fail behaviour
     * @param request ThirdPartyRequest
     * @param requestExpectedStatuses RequestExpectedStatuses
     */
    SendRequestWithExpectedStatuses<Response, ErrorResponse>(request: ThirdPartyRequest, requestExpectedStatuses: RequestExpectedStatuses): Promise<Response | undefined>;
    /**
     * Method checks if is required to refresh auth before make a call to carrier API.
     * Also, if the API return specify status code or the refresh is required then implementation makes it for you.
     * Out of the box method supports save logs and handling errors
     * @param request ThirdPartyRequest
     */
    SendRequest<Response, ErrorResponse>(request: ThirdPartyRequest): Promise<Response | undefined>;
    private HandleAuthLogic;
    private ForceAuthRefresh;
}

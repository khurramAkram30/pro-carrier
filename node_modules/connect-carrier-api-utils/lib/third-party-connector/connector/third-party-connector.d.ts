import { IThirdPartyConnector } from './i-third-party-connector';
import { RequestExpectedStatuses } from './request-expected-statuses';
import { ThirdPartyRequest } from '../request/third-party-request';
import { ResponseSchemaTypes } from './response-schema-types';
export declare class ThirdPartyConnector implements IThirdPartyConnector {
    readonly CarrierName: string;
    /**
     * @param CarrierName Is used as identifier for the logs and error messages returned by connector.
     */
    constructor(CarrierName: string);
    /**
     * Determine type of the response returned by axios call to know what should be returned
     */
    ResponseSchemaType: ResponseSchemaTypes;
    /**
     * Method allows to send request to carrier API based on request configuration
     * Out of the box method supports save logs and handling errors
     * @param request ThirdPartyRequest
     * @constructor
     */
    SendRequest<Response, ErrorResponse>(request: ThirdPartyRequest): Promise<Response | undefined>;
    /**
     * Method allows to send request to carrier API based on request configuration
     * Out of the box method supports save logs and handling errors
     * Also you can provide expected status codes for success or fail behaviour
     * @param request ThirdPartyRequest
     * @param requestExpectedStatuses RequestExpectedStatuses
     * @constructor
     */
    SendRequestWithExpectedStatuses<Response, ErrorResponse>(request: ThirdPartyRequest, requestExpectedStatuses: RequestExpectedStatuses): Promise<Response | undefined>;
    /**
     * Gather response from axios call depends on response schema type
     * @param response
     * @constructor
     * @protected
     */
    protected GetResponse(response: any): any;
    CheckIfStatusIsFailed(requestExpectedStatuses: RequestExpectedStatuses, response: any): void;
    CheckIfStatusIsSuccess(requestExpectedStatuses: RequestExpectedStatuses, response: any): void;
    /**
     * Method allows to handle error returned by axios call
     * @param error error thrown by connector
     */
    HandleError(error: any): void;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThirdPartyConnector = void 0;
const third_party_connector_helper_1 = require("./third-party-connector-helper");
const request_expected_statuses_1 = require("./request-expected-statuses");
const logic_helper_1 = require("../../logic-helper");
const response_schema_types_1 = require("./response-schema-types");
class ThirdPartyConnector {
    /**
     * @param CarrierName Is used as identifier for the logs and error messages returned by connector.
     */
    constructor(CarrierName) {
        this.CarrierName = CarrierName;
        /**
         * Determine type of the response returned by axios call to know what should be returned
         */
        this.ResponseSchemaType = response_schema_types_1.ResponseSchemaTypes.JSON;
    }
    /**
     * Method allows to send request to carrier API based on request configuration
     * Out of the box method supports save logs and handling errors
     * @param request ThirdPartyRequest
     * @constructor
     */
    async SendRequest(request) {
        return await this.SendRequestWithExpectedStatuses(request, new request_expected_statuses_1.RequestExpectedStatusesNullObject());
    }
    /**
     * Method allows to send request to carrier API based on request configuration
     * Out of the box method supports save logs and handling errors
     * Also you can provide expected status codes for success or fail behaviour
     * @param request ThirdPartyRequest
     * @param requestExpectedStatuses RequestExpectedStatuses
     * @constructor
     */
    async SendRequestWithExpectedStatuses(request, requestExpectedStatuses) {
        try {
            (0, logic_helper_1.LogInfo)(`Sending request to ${this.CarrierName}: ${JSON.stringify(request)}`);
            const response = await (0, third_party_connector_helper_1.ThirdPartyAxiosCall)(request);
            (0, logic_helper_1.LogInfo)(`Received response from ${this.CarrierName}: ${response}`);
            this.CheckIfStatusIsSuccess(requestExpectedStatuses, response);
            this.CheckIfStatusIsFailed(requestExpectedStatuses, response);
            return this.GetResponse(response);
        }
        catch (error) {
            (0, logic_helper_1.LogInfo)(`Error during communication with API, sending request to ${this.CarrierName} Error: ${error}`);
            this.HandleError(error);
        }
    }
    /**
     * Gather response from axios call depends on response schema type
     * @param response
     * @constructor
     * @protected
     */
    GetResponse(response) {
        switch (this.ResponseSchemaType) {
            case response_schema_types_1.ResponseSchemaTypes.JSON:
                return response === null || response === void 0 ? void 0 : response.data;
            case response_schema_types_1.ResponseSchemaTypes.XML:
                return response === null || response === void 0 ? void 0 : response.data;
        }
    }
    CheckIfStatusIsFailed(requestExpectedStatuses, response) {
        if (requestExpectedStatuses.failedStatusCodes.includes(response.status)) {
            (0, logic_helper_1.LogInfo)(`${this.CarrierName} API returned status code that determinate failed response from the carrier.`);
            (0, logic_helper_1.HandleError)(`${this.CarrierName} Third Party Connector Error: ${response.data}`);
        }
    }
    CheckIfStatusIsSuccess(requestExpectedStatuses, response) {
        if (!requestExpectedStatuses.successStatusCodes.includes(response.status)) {
            (0, logic_helper_1.LogInfo)(`${this.CarrierName} API returned status code not supported by the connector.`);
        }
    }
    /**
     * Method allows to handle error returned by axios call
     * @param error error thrown by connector
     */
    HandleError(error) {
        var _a, _b, _c;
        const responseBody = this.ResponseSchemaType === response_schema_types_1.ResponseSchemaTypes.JSON ? JSON.stringify(this.GetResponse(error === null || error === void 0 ? void 0 : error.response)) : this.GetResponse(error === null || error === void 0 ? void 0 : error.response);
        (0, logic_helper_1.LogInfo)(`Received response from ${this.CarrierName}: ${responseBody}`);
        (0, logic_helper_1.LogInfo)(`Response message from ${this.CarrierName}: ${error === null || error === void 0 ? void 0 : error.message}`);
        (0, logic_helper_1.HandleError)(`${this.CarrierName} Third Party Connector Error: Message: ${(_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : '.'} Status code: ${(_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.status}. Status details: ${(_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.statusText}. Carrier raw response: ${responseBody !== null && responseBody !== void 0 ? responseBody : '.'} Exception: ${error}`);
    }
}
exports.ThirdPartyConnector = ThirdPartyConnector;
//# sourceMappingURL=third-party-connector.js.map
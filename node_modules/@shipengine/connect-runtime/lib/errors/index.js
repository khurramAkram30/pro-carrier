"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalServerError = exports.RateLimitError = exports.UnauthorizedError = exports.BadRequestError = exports.NotImplementedError = exports.BaseError = exports.ErrorCode = void 0;
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./error-mapper"), exports);
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["Generic"] = "generic";
    ErrorCode["Serialization"] = "serialization";
    ErrorCode["Validation"] = "validation";
    ErrorCode["ExternalClientError"] = "external_client_error";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));
class BaseError extends Error {
    statusCode;
    details;
    retryAfterSeconds;
    retryAfterTime;
    throttlingContext;
    isIntentional = true;
    constructor(statusCode, message, details) {
        super(message);
        this.statusCode = statusCode;
        if (details) {
            this.details = Array.isArray(details) ? details : [details];
        }
    }
}
exports.BaseError = BaseError;
/** @description This error is used to describe an endpoint that has not yet been implemented */
class NotImplementedError extends BaseError {
    constructor() {
        super(404 /* HttpStatusCode.NotFound */, 'This endpoint is not implemented');
    }
}
exports.NotImplementedError = NotImplementedError;
/** @description This error is used to describe a bad client request (either from internal validation or 3rd party API's) */
class BadRequestError extends BaseError {
    constructor(message, details) {
        super(400 /* HttpStatusCode.BadRequest */, message, details);
    }
}
exports.BadRequestError = BadRequestError;
/** @description This error is used to describe an authorization issue with the 3rd parties API's */
class UnauthorizedError extends BaseError {
    constructor(message, details) {
        super(401 /* HttpStatusCode.UnAuthorized */, message, details);
    }
}
exports.UnauthorizedError = UnauthorizedError;
/** @description This error is used to describe when we receive a 429 "too many requests" response from 3rd party API's */
class RateLimitError extends BaseError {
    constructor(message, details) {
        super(429 /* HttpStatusCode.TooManyRequests */, message);
        this.retryAfterSeconds = details?.retryAfterSeconds;
        this.retryAfterTime = details?.retryAfterTime;
        this.throttlingContext = details?.throttlingContext;
    }
}
exports.RateLimitError = RateLimitError;
/** @description This error is used to describe when we receive any 5XX errors from external servers */
class ExternalServerError extends BaseError {
    constructor(message, details) {
        super(520 /* HttpStatusCode.ExternalServerError */, message, details);
    }
}
exports.ExternalServerError = ExternalServerError;
//# sourceMappingURL=index.js.map
export * from './error-mapper';
export declare enum ErrorCode {
    Generic = "generic",
    Serialization = "serialization",
    Validation = "validation",
    ExternalClientError = "external_client_error"
}
export declare const enum HttpStatusCode {
    NotFound = 404,
    BadRequest = 400,
    UnAuthorized = 401,
    TooManyRequests = 429,
    ServerError = 500,
    ExternalServerError = 520
}
export declare const enum StandardizedErrorCode {
    Generic = "generic",
    Validation = "validation",
    Unauthorized = "external_unauthorized_error",
    ExternalServerError = "external_server_error",
    ExternalClientError = "external_client_error"
}
export interface ErrorDetail {
    externalErrorCode?: string;
    message?: string;
    externalHttpStatusCode?: number;
    externalContext?: any;
    errorCode?: ErrorCode;
}
export interface ErrorDetailResponse {
    external_error_code?: string;
    message?: string;
    external_http_status_code?: number;
    standardized_error_code?: string;
    raw_external_context?: string;
}
export interface ErrorResponse {
    transaction_id?: string;
    message: string;
    detailed_errors: ErrorDetailResponse[];
    retry_after_seconds?: number;
    retry_after_time?: string;
    throttling_context?: any;
}
export declare class BaseError extends Error {
    statusCode: number;
    details?: ErrorDetail[];
    retryAfterSeconds?: number;
    retryAfterTime?: string;
    throttlingContext: any;
    isIntentional: boolean;
    constructor(statusCode: number, message: string, details?: ErrorDetail[] | ErrorDetail);
}
/** @description This error is used to describe an endpoint that has not yet been implemented */
export declare class NotImplementedError extends BaseError {
    constructor();
}
/** @description This error is used to describe a bad client request (either from internal validation or 3rd party API's) */
export declare class BadRequestError extends BaseError {
    constructor(message: string, details?: ErrorDetail[] | ErrorDetail);
}
/** @description This error is used to describe an authorization issue with the 3rd parties API's */
export declare class UnauthorizedError extends BaseError {
    constructor(message: string, details?: ErrorDetail[] | ErrorDetail);
}
/** @description Details related to a rate limit error */
export interface RateLimitDetails {
    retryAfterSeconds?: number;
    retryAfterTime?: string;
    throttlingContext?: any;
}
/** @description This error is used to describe when we receive a 429 "too many requests" response from 3rd party API's */
export declare class RateLimitError extends BaseError {
    constructor(message: string, details?: RateLimitDetails);
}
/** @description This error is used to describe when we receive any 5XX errors from external servers */
export declare class ExternalServerError extends BaseError {
    constructor(message: string, details?: ErrorDetail[] | ErrorDetail);
}

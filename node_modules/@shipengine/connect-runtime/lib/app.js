"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapExtensions = exports.ApiCodeValidationMessage = exports.ApiCodeRegex = exports.Method = void 0;
/** @description The Http Verb associated with a given call */
var Method;
(function (Method) {
    Method["POST"] = "post";
    Method["GET"] = "get";
    Method["PUT"] = "put";
    Method["PATCH"] = "patch";
    Method["DELETE"] = "delete";
})(Method || (exports.Method = Method = {}));
/**
 * @description This regex is used to validation ApiCode fields inside of app metadata definitions.
 * When the ALLOW_LEGACY_API_CODES flag is set, capital letters will pass validation, but otherwise
 * we reject them so that developers are encouraged to use proper snake case for their codes.
 */
exports.ApiCodeRegex = process.env.ALLOW_LEGACY_API_CODES
    ? /^[a-zA-Z0-9]\w*[a-zA-Z0-9]$/
    : /^[a-z0-9][a-z0-9_]*[a-z0-9]$/;
exports.ApiCodeValidationMessage = 'ApiCode pattern of: snake case, alphanumeric. If your integration contains legacy metadata you can try running again with ALLOW_LEGACY_API_CODES=1 to use the legacy';
function mapExtensions(extensions) {
    if (!extensions) {
        return [];
    }
    return Object.entries(extensions).map(([path, handler]) => [Method.POST, '/' + path, handler]);
}
exports.mapExtensions = mapExtensions;
//# sourceMappingURL=app.js.map
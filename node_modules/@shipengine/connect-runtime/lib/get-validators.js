"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidators = void 0;
const tslib_1 = require("tslib");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
const ajv_formats_1 = tslib_1.__importDefault(require("ajv-formats"));
const emptyValidator = () => undefined;
const getValidators = (openApiSpec) => {
    const ajv = new ajv_1.default({
        allErrors: true,
        strictSchema: false,
    });
    (0, ajv_formats_1.default)(ajv);
    ajv.addFormat('guid', ajv_formats_1.default.get('uuid')); // We use 'guid', but the formats plugin uses 'uuid'
    Object.entries(openApiSpec.components.schemas).forEach(([name, def]) => {
        if (def.additionalProperties === false && !def.unevaluatedProperties) {
            delete def.additionalProperties;
            def.unevaluatedProperties = false;
        }
        ajv.addSchema({ $id: `#/components/schemas/${name}`, ...def });
    });
    const validateWith = (validator, type) => (value) => {
        if (!validator) {
            throw new Error(`Could not get a validator for ${type}`);
        }
        return validator(value) ? undefined : ajv.errorsText(validator.errors).split(', ');
    };
    const buildValidator = (name, specData) => {
        const schema = specData?.content?.['application/json'].schema;
        const ref = specData?.['$ref']; // to account for inventory api spec (for responses) as it differs from other spec file
        if (!schema && !ref) {
            return emptyValidator;
        }
        const schemaRef = ref ?? schema?.['$ref'];
        if (schemaRef) {
            return validateWith(ajv.getSchema(schemaRef), schemaRef);
        }
        ajv.addSchema({ $id: `#/${name}`, ...schema }, name);
        return validateWith(ajv.getSchema(name), name);
    };
    return (path, method) => {
        const methodSpec = openApiSpec?.paths?.[path]?.[method.toLowerCase()];
        if (!methodSpec) {
            return {};
        }
        return {
            validateRequest: buildValidator(`${path}_${method}_request`, methodSpec.requestBody),
            validateResponse: buildValidator(`${path}_${method}_response`, methodSpec.responses?.['200']),
        };
    };
};
exports.getValidators = getValidators;
//# sourceMappingURL=get-validators.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = exports.obsoleteAppError = void 0;
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./app-deployment"), exports);
tslib_1.__exportStar(require("./errors"), exports);
tslib_1.__exportStar(require("./app"), exports);
tslib_1.__exportStar(require("./logger"), exports);
tslib_1.__exportStar(require("./get-validators"), exports);
tslib_1.__exportStar(require("./get-documents"), exports);
tslib_1.__exportStar(require("./sequence"), exports);
const upgradeMessage = `
=============================================
======== ðŸ›‘ MIGRATION IS REQUIRED ðŸ›‘ ========
=============================================

Starting with @shipengine/connect-runtime v4.0, Connect apps no longer export an executable host process.
The app defines a set of functions and associated metadata. To exercise the functions, you can execute
them in unit test/test script, load in a node REPL, or use the \`@shipengine/connect\` package to
host them as HTTP endpoints as they were previously.

  npm i -D @shipengine/connect
When you add that package, you can replace your 'start' script in package.json with 'connect start'
This will start a local development server that will list the endpoints you can use to test your app.

-- Additional steps --------------------------

  - If your app has a 'serve.ts' or 'serve.js' file, you should remove it.
  - In your 'index.ts' or 'index.js' file, export the object that you are passing into the App constructor. You should
    no longer instantiate nor export an instance of an App class.
  - Ensure that your 'package.json' file has a 'main' field that points to the file that exports your app definition.
  - Add a connect version property to your 'package.json':
    "connect": {
      "version": 4
    }

-- More information --------------------------

  See https://connect.shipengine.com/getting-started/v2-v4-upgrade/ for more information on upgrading
`;
const obsoleteAppError = () => {
    console.log(upgradeMessage);
    throw new Error('Upgrade required');
};
exports.obsoleteAppError = obsoleteAppError;
const start = (app) => {
    console.log(upgradeMessage);
};
exports.start = start;
//# sourceMappingURL=index.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const base_command_1 = tslib_1.__importDefault(require("../base-command"));
const command_1 = require("@oclif/command");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const ApiKeyStore = tslib_1.__importStar(require("../core/utils/api-key-store"));
const api_client_1 = require("../core/api-client");
class Login extends base_command_1.default {
    static description = 'Login with your connect API key';
    static aliases = ['login'];
    static flags = {
        help: command_1.flags.help({
            char: 'h',
            description: 'Show help for the login command',
        }),
        debug: command_1.flags.boolean({
            char: 'd',
            description: 'Show network debugging information',
            default: false,
            hidden: true,
        }),
    };
    async run() {
        // When the -h flag is present the following line haults execution
        const { flags } = this.parse(Login);
        const apiKey = (await cli_ux_1.default.prompt('Please enter your API key', {
            type: 'mask',
        }));
        await ApiKeyStore.set(apiKey);
        try {
            cli_ux_1.default.action.start('Verifying account');
            await this.getCurrentUser(flags.debug);
        }
        catch (error) {
            await ApiKeyStore.clear();
            const err = error;
            switch (err.code) {
                case api_client_1.ApiClientErrors.UnhandledError:
                    return this.error(err.message, {
                        exit: 1,
                    });
                case api_client_1.ApiClientErrors.Unauthorized:
                    return this.error('The given API key is not valid', {
                        exit: 1,
                    });
                default:
                    return this.error(error, {
                        exit: 1,
                    });
            }
        }
        finally {
            cli_ux_1.default.action.stop();
        }
        this.log('You have logged in with a Connect API key');
    }
}
exports.default = Login;
//# sourceMappingURL=login.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const base_command_1 = tslib_1.__importDefault(require("../base-command"));
const app_loader_1 = require("../core/app-loader");
const path_1 = require("path");
const connect_runtime_1 = require("@shipengine/connect-runtime");
const build_logger_1 = require("../app-servers/common/build-logger");
const server_1 = require("../app-servers/server");
const command_1 = require("@oclif/command");
const get_documents_1 = require("../app-servers/common/get-documents");
const login_1 = tslib_1.__importDefault(require("./login"));
const unauthenticated_error_1 = require("../core/unauthenticated-error");
const in_memory_sequence_1 = require("../app-servers/common/in-memory-sequence");
class Start extends base_command_1.default {
    static description = 'Start the app';
    isDebug = false;
    static flags = {
        help: command_1.flags.help({
            char: 'h',
            description: 'Show help for the start command',
        }),
        debug: command_1.flags.boolean({
            char: 'd',
            description: 'Show network debugging information',
            default: false,
            hidden: true,
        }),
    };
    static args = [
        {
            name: 'path',
            required: false,
            description: 'Path to package (defaults to current directory).',
        },
    ];
    async run() {
        const { flags, args } = this.parse(Start);
        this.isDebug = flags.debug;
        try {
            const appPath = (0, path_1.resolve)(args.path ?? process.cwd());
            this.log(`Starting app from ${appPath}`);
            const app = await (0, app_loader_1.loadApp)(appPath);
            if (!app.manifest.devDependencies['@shipengine/connect']) {
                throw new Error(`Please use "npm i -D @shipengine/connect" to start your app locally.
See https://connect.shipengine.com/getting-started/v2-v4-upgrade/ for more information on upgrading`);
            }
            this.startAppV4(appPath);
        }
        catch (error) {
            switch (error.code) {
                case 'ERR_APP_ERROR':
                    return this.error('Error loading your app - please make sure you are in an app directory', {
                        exit: 1,
                    });
                default:
                    return this.error(error, {
                        exit: 1,
                    });
            }
        }
    }
    startAppV4 = async (appPath) => {
        // Provide development dependencies
        (0, connect_runtime_1.setLogger)((0, build_logger_1.buildLogger)());
        (0, connect_runtime_1.setDocumentRenderer)((0, get_documents_1.getDocumentsRenderer)(this.verifyConnectUser));
        (0, connect_runtime_1.setSequence)((0, in_memory_sequence_1.inMemorySequence)());
        const packageDir = (0, path_1.resolve)(process.cwd(), appPath);
        const app = await Promise.resolve(`${packageDir}`).then(s => tslib_1.__importStar(require(s)));
        (0, server_1.start)(app.default || app);
    };
    verifyConnectUser = async () => {
        // Verify user is logged in
        try {
            await this.getCurrentUser(this.isDebug);
        }
        catch (error) {
            if (error instanceof unauthenticated_error_1.UnauthenticatedError) {
                await login_1.default.run([]);
            }
            else {
                return this.error(error);
            }
        }
        try {
            return this.apiClient(this.isDebug);
        }
        catch (error) {
            return this.error(error);
        }
    };
}
exports.default = Start;
//# sourceMappingURL=start.js.map
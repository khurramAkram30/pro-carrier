"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const base_command_1 = tslib_1.__importDefault(require("../base-command"));
const yeoman_environment_1 = require("yeoman-environment");
const command_1 = require("@oclif/command");
const cli_banner_1 = tslib_1.__importDefault(require("../core/utils/cli-banner"));
const GENERATOR_TYPES = {
    APP: 'app',
    INFRA: 'infra',
};
class New extends base_command_1.default {
    static description = 'Create a new package to develop a custom ShipEngine app';
    static aliases = ['new'];
    static flags = {
        force: command_1.flags.boolean({
            description: 'Overwrite existing files',
            char: 'f',
        }),
        yes: command_1.flags.boolean({
            description: 'Skips the questions and uses the defaults (carrier|Javascript|yaml)',
            char: 'y',
        }),
        help: command_1.flags.help({
            char: 'h',
            description: 'Show help for the new command',
        }),
        infra: command_1.flags.boolean({
            description: 'Initializes infra files for ShipEngine internal deployments',
        }),
        'dependency-version': command_1.flags.string({
            hidden: true,
            description: 'The version of the dependencies to use',
            default: 'latest',
        }),
    };
    static args = [
        {
            name: 'path',
            required: false,
            description: 'Path to new package (defaults to current directory)',
        },
    ];
    static examples = ['$ connect init'];
    async run() {
        const { flags, args } = this.parse(New);
        const env = (0, yeoman_environment_1.createEnv)();
        const generatorOptions = {
            force: flags.force,
            path: args.path,
            useDefaults: flags.yes,
            dependencyVersion: flags['dependency-version'],
        };
        env.register(require.resolve('../core/generators/apps-new'), GENERATOR_TYPES.APP);
        env.register(require.resolve('../core/generators/infra-new'), GENERATOR_TYPES.INFRA);
        let generatorType = GENERATOR_TYPES.APP;
        if (flags.infra) {
            generatorType = GENERATOR_TYPES.INFRA;
        }
        this.log((0, cli_banner_1.default)());
        this.log('Time to build a Connect app!');
        return await env.run(generatorType, generatorOptions);
    }
}
exports.default = New;
//# sourceMappingURL=init.js.map
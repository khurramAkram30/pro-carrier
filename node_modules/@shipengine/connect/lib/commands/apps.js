"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const base_command_1 = tslib_1.__importDefault(require("../base-command"));
const command_1 = require("@oclif/command");
const login_1 = tslib_1.__importDefault(require("./login"));
const cli_table_1 = tslib_1.__importDefault(require("cli-table"));
const unauthenticated_error_1 = require("../core/unauthenticated-error");
class Apps extends base_command_1.default {
    static description = 'List your apps';
    static flags = {
        help: command_1.flags.help({
            char: 'h',
            description: 'Show help for the apps commands',
        }),
        debug: command_1.flags.boolean({
            char: 'd',
            description: 'Show network debugging information',
            default: false,
            hidden: true,
        }),
    };
    async run() {
        // When the -h flag is present the following line haults execution
        const { flags } = this.parse(Apps);
        // Verify user is logged in
        try {
            await this.getCurrentUser();
        }
        catch (error) {
            if (error instanceof unauthenticated_error_1.UnauthenticatedError) {
                await login_1.default.run([]);
            }
            else {
                return this.error(error, {
                    exit: 1,
                });
            }
        }
        const table = new cli_table_1.default({
            head: ['ID', 'Name', 'Type'],
        });
        const apiClient = await this.apiClient(flags.debug);
        const apps = apiClient.apps.getAll();
        (await apps).items.forEach((app) => {
            table.push([app.id, app.name, app.type]);
        });
        this.log(table.toString());
    }
}
exports.default = Apps;
//# sourceMappingURL=apps.js.map
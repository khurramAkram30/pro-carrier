"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const base_command_1 = tslib_1.__importDefault(require("../base-command"));
const command_1 = require("@oclif/command");
const login_1 = tslib_1.__importDefault(require("./login"));
const api_client_1 = require("../core/api-client");
const cli_table_1 = tslib_1.__importDefault(require("cli-table"));
const create_or_find_test_account_1 = require("../core/utils/create-or-find-test-account");
const publish_app_1 = require("../core/publish-app");
const update_app_id_1 = require("../core/update-app-id");
const path_1 = tslib_1.__importDefault(require("path"));
const chalk_1 = require("chalk");
const app_loader_1 = require("../core/app-loader");
const unauthenticated_error_1 = require("../core/unauthenticated-error");
const displayAppInfo = (log, id, name, type, status, createdAt) => {
    const table = new cli_table_1.default();
    table.push({ ID: [id] }, { Name: [name] }, { Type: [type] }, { Status: [status] }, { 'Created At': [createdAt] });
    log(table.toString());
};
class Info extends base_command_1.default {
    static description = 'Get the current information about your app';
    static flags = {
        help: command_1.flags.help({
            char: 'h',
            description: 'Show help for the info command',
        }),
        debug: command_1.flags.boolean({
            char: 'd',
            description: 'Show network debugging information',
            default: false,
            hidden: true,
        }),
    };
    async run() {
        // When the -h flag is present the following line haults execution
        const { flags } = this.parse(Info);
        // Verify user is logged in
        try {
            await this.getCurrentUser(flags.debug);
        }
        catch (error) {
            if (error instanceof unauthenticated_error_1.UnauthenticatedError) {
                await login_1.default.run([]);
            }
            else {
                return this.error(error, {
                    exit: 1,
                });
            }
        }
        try {
            const pathToApp = process.cwd();
            const app = await (0, app_loader_1.loadApp)(pathToApp);
            const supportedCountries = (0, publish_app_1.getSupportedCountries)(app);
            const apiClient = await this.apiClient(flags.debug);
            const platformApp = await apiClient.apps.getByIdOrName(app.manifest.name, app.manifest.appId);
            if (!app.manifest.appId) {
                (0, update_app_id_1.updateAppId)(path_1.default.join(process.cwd(), 'package.json'), platformApp.id);
                app.manifest.appId = platformApp.id;
                console.log((0, chalk_1.yellow)(`Updated package.json set appId to ${platformApp.id}`));
            }
            const paginatedDeployments = await apiClient.deployments.getAllForAppId(platformApp.id);
            const latestDeployment = paginatedDeployments.items[0];
            const accounts = await (0, create_or_find_test_account_1.createOrFindTestAccounts)(apiClient, platformApp, supportedCountries);
            displayAppInfo(this.log, platformApp.id, platformApp.name, platformApp.type, latestDeployment.status, latestDeployment.createdAt);
            console.log('\nCredentials\n');
            (0, publish_app_1.displayAccountInfo)(accounts);
        }
        catch (error) {
            switch (error.code) {
                case 'ERR_APP_ERROR':
                    return this.error('Error loading your app - please make sure you are in an app directory', {
                        exit: 1,
                    });
                case api_client_1.ApiClientErrors.NotFound:
                    return this.error('This app has not been published yet', {
                        exit: 1,
                    });
                default:
                    return this.error(error, {
                        exit: 1,
                    });
            }
        }
    }
}
exports.default = Info;
//# sourceMappingURL=info.js.map
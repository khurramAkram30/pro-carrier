"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = exports.Environment = void 0;
const tslib_1 = require("tslib");
const express_1 = tslib_1.__importStar(require("express"));
const connect_runtime_1 = require("@shipengine/connect-runtime");
const error_handling_1 = require("../middleware/error-handling");
var Environment;
(function (Environment) {
    Environment["Local"] = "local";
    Environment["Development"] = "development";
    Environment["Stage"] = "staging";
    Environment["Production"] = "production";
})(Environment || (exports.Environment = Environment = {}));
const initializeEnvironmentVariables = (config) => {
    process.env.NODE_ENV = process.env.NODE_ENV || config?.environment || Environment.Local;
    process.env.PORT = process.env.PORT || config?.port || '3005';
    console.log('Initializing Environment Variables');
    console.log('##################################################################');
    console.log(`NODE_ENV=${process.env.NODE_ENV}`);
    console.log(`PORT=${process.env.PORT}`);
    console.log('##################################################################');
};
const executeImplementation = (implementation, validateRequest, validateResponse) => {
    return async (req, res, next) => {
        try {
            const requestErrors = validateRequest?.call(this, req.body);
            if (requestErrors) {
                connect_runtime_1.logger.warn({
                    message: 'Request Validation Failed',
                    requestErrors,
                });
            }
            const response = await implementation(req.body);
            const isAsyncGenerator = typeof response?.next === 'function';
            if (isAsyncGenerator) {
                await writeResultsToChunkedResponse(res, response, validateResponse);
            }
            else {
                const errors = validateResponse?.call(this, response);
                if (errors) {
                    connect_runtime_1.logger.warn({
                        message: 'Response Validation Failed',
                        errors,
                    });
                }
            }
            res.status(200);
            isAsyncGenerator ? res.end() : res.send(response);
        }
        catch (exception) {
            next(exception);
        }
    };
};
const writeResultsToChunkedResponse = async (response, generator, validateResponse) => {
    response.write('[');
    let wroteOne = false;
    while (true) {
        const result = await generator.next();
        if (result.done) {
            break;
        }
        if (wroteOne) {
            response.write(',');
        }
        if (validateResponse) {
            const errors = validateResponse(result.value);
            if (errors) {
                connect_runtime_1.logger.warn({
                    message: 'Response Validation Failed',
                    errors,
                });
            }
        }
        response.write(JSON.stringify(result.value));
        wroteOne = true;
    }
    response.write(']');
};
const createRoutes = async (app) => {
    if (app.hasOwnProperty('Metadata')) {
        if (app.Metadata.hasOwnProperty('Carriers')) {
            return (await Promise.resolve().then(() => tslib_1.__importStar(require('./carrier-api-app')))).createCarrierApiRoutes(app);
        }
        if (app.Metadata.hasOwnProperty('OrderSources')) {
            return (await Promise.resolve().then(() => tslib_1.__importStar(require('./order-source-api-app')))).createOrderSourceApiRoutes(app);
        }
        if (app.Metadata.hasOwnProperty('FreightCarriers')) {
            return (await Promise.resolve().then(() => tslib_1.__importStar(require('./freight-api-app')))).createFreightApiRoutes(app);
        }
        if (app.Metadata.hasOwnProperty('FulfillmentProviders')) {
            return (await Promise.resolve().then(() => tslib_1.__importStar(require('./fulfillment-provider-api-app')))).createFulfillmentProviderApiRoutes(app);
        }
        if (app.Metadata.hasOwnProperty('supportsInventoryPush')) {
            return (await Promise.resolve().then(() => tslib_1.__importStar(require('./inventory-api-app')))).createInventoryApiRoutes(app);
        }
    }
    return Object.entries(app)
        .filter(([, handler]) => handler !== null)
        .map(([name, handler]) => ({
        method: connect_runtime_1.Method.POST,
        path: `/${name}`,
        handler: handler,
    }));
};
/**
 * This method starts a local server for testing Connect functions
 * @param config
 */
const start = async (app, config) => {
    initializeEnvironmentVariables(config);
    const server = (0, express_1.default)();
    server.use(express_1.default.json({
        limit: '30mb',
    }));
    const router = (0, express_1.Router)();
    const routes = await createRoutes(app);
    routes.forEach((x) => {
        console.log(`${x.method}: ${x.path}`);
        router[x.method](x.path, executeImplementation(x.handler, x.validateRequest, x.validateResponse));
    });
    server.use(router);
    server.use(error_handling_1.localErrorHandler);
    server.listen(process.env.PORT, () => {
        console.log(`Server started http://localhost:${process.env.PORT}`);
    });
};
exports.start = start;
//# sourceMappingURL=server.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ono_1 = tslib_1.__importDefault(require("@jsdevtools/ono"));
const __1 = require("..");
class Apps {
    client;
    constructor(apiClient) {
        this.client = apiClient;
    }
    /**
     * Creates a new App.
     * @returns {Promise<ConnectApp>} Promise object that resolves to a ConnectApp object.
     */
    async create({ appId, name, type, }) {
        const response = await this.client.call({
            endpoint: 'apps',
            method: 'POST',
            body: { appId, name, type },
        });
        return response;
    }
    /**
     * Updates an App.
     * @returns {Promise<ConnectApp>} Promise object that resolves to a ConnectApp object.
     */
    async update(appId, name, type) {
        const response = await this.client.call({
            endpoint: `apps/${appId}`,
            method: 'POST',
            body: { name, type },
        });
        return response;
    }
    /**
     * Finds or creates a new app by name
     * @returns {Promise<ConnectApp>} Promise object that resolves to a ConnectApp object.
     */
    async findOrCreateApp({ appId, name, type, }) {
        let app;
        try {
            app = await this.getByIdOrName(name, appId);
            return app;
        }
        catch (error) {
            const code = Reflect.get(error, 'code');
            if (code === __1.ApiClientErrors.NotFound) {
                app = await this.create({
                    appId: appId,
                    name: name,
                    type: type,
                });
                return app;
            }
            throw error;
        }
    }
    /**
     * Gets all Apps that belong to the given API key.
     * @returns {Promise<PaginatedItems<ConnectApp>>} Promise object that resolves to an Array of ConnectApp objects.
     */
    async getAll() {
        const response = await this.client.call({
            endpoint: 'apps',
            method: 'GET',
        });
        return response;
    }
    /**
     * Get an App by its ID.
     * @returns {Promise<ConnectApp>} Promise object that resolves to a ConnectApp object.
     */
    async getById(id) {
        const response = await this.client.call({
            endpoint: `apps/${id}`,
            method: 'GET',
        });
        return response;
    }
    /**
     * Get an App by its name.
     * @returns {Promise<ConnectApp>} Promise object that resolves to a ConnectApp object.
     */
    async getByName(name) {
        const response = await this.client.call({
            endpoint: `apps?name=${encodeURI(name)}`,
            method: 'GET',
        });
        if (response.items[0]) {
            return response.items[0];
        }
        throw (0, ono_1.default)({ code: __1.ApiClientErrors.NotFound }, 'The record could not be found');
    }
    /**
     * @description Returns an app, if an id is provided it will use that, if not it defaults to looking it up by name
     * @param name The name of the app (this is bad, we want it to eventually always be the id)
     * @param appId The appId found in the manifest of the package.json file
     */
    async getByIdOrName(name, appId) {
        if (appId) {
            return this.getById(appId);
        }
        return this.getByName(name);
    }
}
exports.default = Apps;
//# sourceMappingURL=apps.js.map
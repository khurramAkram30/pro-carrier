import ShipengineAPIClient from '..';
import { Deployment, PaginatedItems } from '../../types';
export default class Deployments {
    private client;
    constructor(apiClient: ShipengineAPIClient);
    /**
     * Create a new deployment for the given appID
     * @returns {Promise<Deployment>} Promise object that resolves to a Deployment object.
     */
    create({ appId, pathToTarball, }: {
        appId: string;
        pathToTarball: string;
    }): Promise<Deployment>;
    /**
     * Gets all deploys for the given appID
     * @returns {Promise<PaginatedItems<Deployment>>} Promise object that resolves to an Array of Deployment objects.
     */
    getAllForAppId(appId: string): Promise<PaginatedItems<Deployment>>;
    /**
     * Gets the deploy for the given appId and deployID
     * @returns {Promise<Deployment>} Promise object that resolves to a Deployment object.
     */
    getById({ appId, deployId }: {
        deployId: string;
        appId: string;
    }): Promise<Deployment>;
    /**
     * Gets the logs for a deployment for the given appId and deployID
     * @returns {Promise<string>} Promise object that resolves to a Deployment object.
     */
    getLogsById({ appId, deployId, type, }: {
        deployId: string;
        appId: string;
        type?: string;
    }): Promise<string>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAppDeploymentBuilder = exports.getAppAndDeploymentType = exports.DeploymentType = exports.AppType = void 0;
const load_module_1 = require("../utils/load-module");
var AppType;
(function (AppType) {
    AppType["Carrier"] = "carrier";
    AppType["Freight"] = "freight";
    AppType["Order"] = "order";
    AppType["NativeRating"] = "native_rating";
    AppType["Fulfillment"] = "fulfillment";
    AppType["Inventory"] = "inventory";
})(AppType || (exports.AppType = AppType = {}));
var DeploymentType;
(function (DeploymentType) {
    DeploymentType["OrderSourceAPI"] = "order_source_api";
    DeploymentType["CarrierAPI"] = "carrier_api";
    DeploymentType["FreightAPI"] = "freight_api";
    DeploymentType["NativeRatingAPI"] = "native_rating_api";
    DeploymentType["LegacyConnectCarrier"] = "carrier";
    DeploymentType["LegacyConnectOrder"] = "order";
    DeploymentType["FulfillmentProviderAPI"] = "fulfillment_provider_api";
    DeploymentType["InventoryAPI"] = "inventory_api";
})(DeploymentType || (exports.DeploymentType = DeploymentType = {}));
const V2_APPS = {
    '@shipengine/connect-carrier-api': {
        deploymentType: DeploymentType.CarrierAPI,
        appType: AppType.Carrier,
    },
    '@shipengine/connect-freight-api': {
        deploymentType: DeploymentType.FreightAPI,
        appType: AppType.Freight,
    },
    '@shipengine/connect-order-source-api': {
        deploymentType: DeploymentType.OrderSourceAPI,
        appType: AppType.Order,
    },
    '@shipengine/connect-native-rating-api': {
        deploymentType: DeploymentType.NativeRatingAPI,
        appType: AppType.NativeRating,
    },
    '@shipengine/connect-fulfillment-provider-api': {
        deploymentType: DeploymentType.FulfillmentProviderAPI,
        appType: AppType.Fulfillment,
    },
    '@shipengine/connect-inventory-api': {
        deploymentType: DeploymentType.InventoryAPI,
        appType: AppType.Inventory,
    },
};
const V2_DEPENDENCIES = Object.keys(V2_APPS);
const getAppAndDeploymentType = (manifest) => {
    const dependencies = [
        ...Object.keys(manifest.devDependencies || {}),
        ...Object.keys(manifest.dependencies || {}),
    ];
    const match = dependencies.filter((dependency) => V2_DEPENDENCIES.includes(dependency));
    if (match.length === 1) {
        return V2_APPS[match[0]];
    }
    throw new Error(`Unable to determine app type from dependencies listed in package.json`);
};
exports.getAppAndDeploymentType = getAppAndDeploymentType;
const getAppDeploymentBuilder = (manifest, appPath) => {
    const dependencies = [
        ...Object.keys(manifest.devDependencies || {}),
        ...Object.keys(manifest.dependencies || {}),
    ];
    const match = dependencies.filter((dependency) => V2_DEPENDENCIES.includes(dependency));
    if (match.length !== 1) {
        throw new Error(`Unable to determine app type from dependencies listed in package.json`);
    }
    const apiDependencyName = match[0];
    const { deploymentType, appType } = V2_APPS[apiDependencyName];
    return (app) => {
        // If the app has a 'routes' property, it means that the package is exporting an instantiated app
        // Use the v2 logic for handling that
        if (app.hasOwnProperty('routes')) {
            return {
                providerId: app.data?.Id,
                id: app.data?.Id,
                manifest,
                type: appType,
                deploymentType,
                validate: app.validate,
                getSupportedCountries: app.getSupportedCountries,
                prepackage: app.prepackage && app.prepackage.bind(app),
            };
        }
        const appTypeDependency = (0, load_module_1.loadModule)(apiDependencyName, appPath);
        // If the app has a 'Metadata' property, then it's exporting the app definition instead of the instantiated app
        // This is what we expect from v4 apps.  We also want to make sure the app type specific dependency has
        // the builder we expect
        if (!app.hasOwnProperty('Metadata')) {
            throw new Error(`Your app package should have a default export that conforms to the app definition of the ${apiDependencyName} package.
        Please see https://connect.shipengine.com/getting-started/v2-v4-upgrade/ for more information`);
        }
        if (!appTypeDependency.hasOwnProperty('buildAppDeployment')) {
            throw new Error(`The ${apiDependencyName} package needs to be updated to work with the newest Connect app format.
        Please see https://connect.shipengine.com/getting-started/v2-v4-upgrade/ for more information`);
        }
        const { id, validate, getSupportedCountries, prepackage } = appTypeDependency.buildAppDeployment(app);
        return {
            providerId: id,
            id: id,
            manifest,
            type: appType,
            deploymentType,
            validate,
            getSupportedCountries,
            prepackage: prepackage && prepackage.bind(app),
        };
    };
};
exports.getAppDeploymentBuilder = getAppDeploymentBuilder;
//# sourceMappingURL=app-types.js.map
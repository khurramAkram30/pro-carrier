"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clear = exports.set = exports.get = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = require("fs");
const xdg_1 = tslib_1.__importDefault(require("@folder/xdg"));
const mkdirp_1 = tslib_1.__importDefault(require("mkdirp"));
const os_1 = tslib_1.__importDefault(require("os"));
const unauthenticated_error_1 = require("../unauthenticated-error");
const TEST = !!process.env.TEST;
const CONFIG_DIR = TEST ? os_1.default.tmpdir() : path_1.default.resolve((0, xdg_1.default)().config, 'connect');
const CONFIG_FILE = path_1.default.resolve(CONFIG_DIR, 'key');
const LEGACY_CONFIG_FILE = TEST
    ? path_1.default.resolve(os_1.default.tmpdir(), '.shipconnect')
    : path_1.default.resolve(os_1.default.homedir(), '.shipconnect');
/**
 * Retrieves a key if it exist in the file system
 * @returns {Promise<string>} A promise w/ the key value
 */
async function get() {
    let apiKey;
    try {
        apiKey = await fs_1.promises.readFile(CONFIG_FILE, 'utf8');
    }
    catch (error) {
        if (error?.code !== 'ENOENT') {
            throw error;
        }
    }
    if (!apiKey) {
        try {
            apiKey = await fs_1.promises.readFile(LEGACY_CONFIG_FILE, 'utf8');
        }
        catch (error) {
            if (error?.code !== 'ENOENT') {
                throw error;
            }
        }
        if (apiKey) {
            // we found the key in the legacy config file - migrate to the new config file
            await set(apiKey);
            await fs_1.promises.unlink(LEGACY_CONFIG_FILE);
        }
    }
    if (!apiKey) {
        throw new unauthenticated_error_1.UnauthenticatedError(`${CONFIG_FILE} not found`);
    }
    return apiKey.trim();
}
exports.get = get;
/**
 * Sets a key in the file system
 *
 * @param {string} apiKey The key that should be set
 * @returns {Promise<string>} A promise with the value of the key that was set
 */
async function set(apiKey) {
    await (0, mkdirp_1.default)(CONFIG_DIR);
    await fs_1.promises.writeFile(CONFIG_FILE, `${apiKey.trim()}\n`, {
        encoding: 'utf8',
        mode: '600',
    });
}
exports.set = set;
/**
 * Clears a key if it exist in the file system
 * @returns {Promise<void>} A promise that resolves to void
 */
async function clear() {
    try {
        await fs_1.promises.unlink(CONFIG_FILE);
        await fs_1.promises.unlink(LEGACY_CONFIG_FILE);
    }
    catch (error) {
        if (error?.code === 'ENOENT') {
            return;
        }
        throw error;
    }
}
exports.clear = clear;
//# sourceMappingURL=api-key-store.js.map